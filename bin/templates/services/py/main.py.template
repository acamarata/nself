from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from datetime import datetime
import os
import uvicorn

app = FastAPI(
    title="${SERVICE_NAME}",
    description="Python service for ${PROJECT_NAME}",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure this for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic models
class HealthResponse(BaseModel):
    status: str
    service: str
    timestamp: datetime

class StatusResponse(BaseModel):
    service: str
    status: str
    timestamp: datetime
    environment: str
    python_version: str

class ProcessRequest(BaseModel):
    data: dict
    options: dict = {}

@app.get("/")
async def hello():
    return {
        "message": "Hello from ${SERVICE_NAME}! ðŸš€",
        "service": "${SERVICE_NAME}",
        "timestamp": datetime.now()
    }

@app.get("/health", response_model=HealthResponse)
async def health():
    return HealthResponse(
        status="ok",
        service="${SERVICE_NAME}",
        timestamp=datetime.now()
    )

@app.get("/status", response_model=StatusResponse)
async def status():
    import sys
    return StatusResponse(
        service="${SERVICE_NAME}",
        status="running",
        timestamp=datetime.now(),
        environment=os.getenv("PYTHON_ENV", "development"),
        python_version=f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
    )

@app.post("/process")
async def process_data(request: ProcessRequest):
    """
    Example endpoint for processing data.
    Implement your ${SERVICE_NAME} logic here.
    """
    try:
        # Add your service logic here
        result = {
            "message": f"Processing data with ${SERVICE_NAME}",
            "processed_data": request.data,
            "options": request.options,
            "timestamp": datetime.now(),
            "status": "success"
        }
        
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/${SERVICE_NAME}")
async def service_endpoint():
    """
    Service-specific endpoint.
    Customize this for your ${SERVICE_NAME} functionality.
    """
    return {
        "service": "${SERVICE_NAME}",
        "message": "Service-specific endpoint",
        "timestamp": datetime.now(),
        "data": "Your custom logic goes here"
    }

if __name__ == "__main__":
    port = int(os.getenv("PORT", "${SERVICE_PORT}"))
    print(f"ðŸš€ {SERVICE_NAME} is running on port {port}")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        reload=os.getenv("PYTHON_ENV") == "development"
    )