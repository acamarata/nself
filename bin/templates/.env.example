#####################################
# nself Configuration
# Copy this file to .env.local and update values
# 
# For production deployment:
# 1. Run 'nself prod' to create production .env
# 2. Edit .env with production overrides only
# 3. Keep .env.local as your base configuration
#####################################

#####################################
# CORE PROJECT SETTINGS
# These variables are used throughout the configuration
#####################################

# Environment Mode: dev or prod
# dev = Development mode (default) - enables dev tools, mock data, debug logging
# prod = Production mode - security hardening, real data, optimized settings
ENV=dev # PRODUCTION: Set to "prod" in your .env override

# Project Identifier
# Used for Docker container names, database names, and resource prefixes
PROJECT_NAME=myproject

# Base Domain
# All services will be subdomains of this domain
# Development: local.nself.org (with automatic SSL)
# Production: your-domain.com (configure SSL_MODE below)
BASE_DOMAIN=local.nself.org # PRODUCTION: Use your real domain (e.g., api.mycompany.com)

# Database Seeding Strategy
# When true: Uses Hasura/PostgreSQL standard structure (common/ + environment-specific)
# When false: Uses single default/ directory for all environments
DB_ENV_SEEDS=true # Recommended: Follows industry standards

# Legacy environment variable (for backward compatibility)
# Automatically set based on ENV: dev->development, prod->production
# Note: This is handled internally by nself, no need to set manually

#####################################
# PostgreSQL Database
#####################################
POSTGRES_VERSION=16-alpine
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=nhost
POSTGRES_USER=postgres
POSTGRES_PASSWORD=secretpassword # PRODUCTION: Generate with 'openssl rand -hex 32'
# Enable extensions (comma separated: timescaledb,postgis,pg_cron,vector,uuid-ossp)
POSTGRES_EXTENSIONS=uuid-ossp

#####################################
# Hasura GraphQL Engine
#####################################
HASURA_VERSION=v2.44.0
HASURA_GRAPHQL_ADMIN_SECRET=hasura-admin-secret # PRODUCTION: Generate with 'openssl rand -hex 32'
# Generate a secure JWT key with: openssl rand -hex 32
HASURA_GRAPHQL_JWT_SECRET='{"type":"HS256","key":"CHANGE-THIS-TO-YOUR-OWN-SECRET-KEY-MIN-32-CHARS"}' # PRODUCTION: Replace key value
HASURA_GRAPHQL_ENABLE_CONSOLE=true # Auto-set to false when ENV=prod
HASURA_GRAPHQL_DEV_MODE=true # Auto-set to false when ENV=prod
HASURA_GRAPHQL_ENABLE_TELEMETRY=false
HASURA_GRAPHQL_CORS_DOMAIN=* # PRODUCTION: Set to your domain (e.g., https://myapp.com)
HASURA_ROUTE=api.${BASE_DOMAIN}

# Remote Schemas (optional) - uncomment to enable
# REMOTE_SCHEMA_1_NAME=app1_api
# REMOTE_SCHEMA_1_URL=https://api.app1.${BASE_DOMAIN}/graphql
# REMOTE_SCHEMA_1_HEADERS=x-api-key:your-api-key
# REMOTE_SCHEMA_2_NAME=app2_api  
# REMOTE_SCHEMA_2_URL=https://api.app2.${BASE_DOMAIN}/graphql
# REMOTE_SCHEMA_2_HEADERS=authorization:Bearer token

#####################################
# Hasura Auth Service
#####################################
AUTH_VERSION=0.36.0
AUTH_HOST=auth
AUTH_PORT=4000
AUTH_CLIENT_URL=http://localhost:3000 # Your frontend URL
AUTH_JWT_REFRESH_TOKEN_EXPIRES_IN=2592000 # 30 days in seconds
AUTH_JWT_ACCESS_TOKEN_EXPIRES_IN=900 # 15 minutes in seconds
AUTH_WEBAUTHN_ENABLED=false
AUTH_ROUTE=auth.${BASE_DOMAIN}

# Email Configuration
AUTH_SMTP_HOST=mailhog # Use real SMTP in production
AUTH_SMTP_PORT=1025 # Standard SMTP: 587, Secure: 465
AUTH_SMTP_USER= # Required for production SMTP
AUTH_SMTP_PASS= # Required for production SMTP
AUTH_SMTP_SECURE=false # Set to true for production
AUTH_SMTP_SENDER=noreply@${BASE_DOMAIN}

#####################################
# Hasura Storage (MinIO)
#####################################
MINIO_VERSION=RELEASE.2024-12-18T13-15-44Z
MINIO_ROOT_USER=minioadmin # CHANGE IN PRODUCTION!
MINIO_ROOT_PASSWORD=minioadmin # CHANGE IN PRODUCTION!
MINIO_PORT=9000
MINIO_CONSOLE_PORT=9001
S3_ACCESS_KEY=storage-access-key # CHANGE IN PRODUCTION!
S3_SECRET_KEY=storage-secret-key # CHANGE IN PRODUCTION!
S3_BUCKET=nhost
S3_REGION=us-east-1
STORAGE_ROUTE=storage.${BASE_DOMAIN}
STORAGE_CONSOLE_ROUTE=storage-console.${BASE_DOMAIN}

#####################################
# Frontend App Routes (Nginx Proxy)
# Map your local development apps to domains
# Format: LOCAL_PORT:subdomain
#####################################
# Multi-App Configuration
# Each app has: route_key, short_name, long_name
# APP_{N}_ROUTE=port:subdomain.${BASE_DOMAIN}
# APP_{N}_SHORT=a{n} (for table prefixing, max 5 chars)
# APP_{N}_LONG=Application {N} (for display names)

# APP_1_ROUTE=3000:app1.${BASE_DOMAIN}
# APP_1_SHORT=a1
# APP_1_LONG=Application 1

# APP_2_ROUTE=3001:app2.${BASE_DOMAIN}
# APP_2_SHORT=a2
# APP_2_LONG=Application 2

# APP_3_ROUTE=3002:app3.${BASE_DOMAIN}
# APP_3_SHORT=a3
# APP_3_LONG=Application 3

# Legacy format (still supported)
# APP_ROUTE_1=3000:app1.${BASE_DOMAIN}
# APP_ROUTE_2=3001:app2.${BASE_DOMAIN}
# APP_ROUTE_3=3002:app3.${BASE_DOMAIN}
# APP_ROUTE_4=8080:admin.${BASE_DOMAIN}
# APP_ROUTE_5=5173:vite-app.${BASE_DOMAIN}

#####################################
# Email Service Configuration
#####################################
# For development: mailhog | For production: smtp, sendgrid, mailgun, postmark, ses
EMAIL_PROVIDER=mailhog

# SMTP Settings (if EMAIL_PROVIDER=smtp)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
SMTP_SECURE=true

# API-based providers (if using sendgrid, mailgun, etc.)
# EMAIL_API_KEY=your-api-key
# EMAIL_API_ENDPOINT=https://api.sendgrid.com/v3/mail/send

EMAIL_FROM=noreply@${BASE_DOMAIN}
MAILHOG_ROUTE=mailhog.${BASE_DOMAIN}

#####################################
# Optional Services
#####################################

# Redis Cache (required for BullMQ and caching)
REDIS_ENABLED=false
REDIS_VERSION=7-alpine
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD= # Set password in production

# Nhost Functions Service (Serverless)
FUNCTIONS_ENABLED=false
FUNCTIONS_VERSION=0.2.13
FUNCTIONS_PORT=3000
FUNCTIONS_ROUTE=functions.${BASE_DOMAIN}

# Nhost Dashboard
DASHBOARD_ENABLED=false
DASHBOARD_VERSION=0.20.32
DASHBOARD_PORT=3030
DASHBOARD_ROUTE=dashboard.${BASE_DOMAIN}

#####################################
# SSL/TLS Configuration
#####################################
# SSL Mode: local (self-signed for *.nself.org), letsencrypt, custom, none
SSL_MODE=local

# For Let's Encrypt (production)
LETSENCRYPT_EMAIL=admin@yourdomain.com
LETSENCRYPT_STAGING=false # Set to false for real certificates

# For custom SSL certificates
SSL_CERT_PATH=/path/to/cert.pem
SSL_KEY_PATH=/path/to/key.pem

#####################################
# Nginx Configuration
#####################################
NGINX_VERSION=1.27-alpine
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443
NGINX_CLIENT_MAX_BODY_SIZE=100M
NGINX_PROXY_TIMEOUT=300s

#####################################
# Security & Rate Limiting
#####################################
# Basic Auth for sensitive endpoints (user:password)
BASIC_AUTH_ENABLED=false
BASIC_AUTH_USERS=admin:changeme

# Rate limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS_PER_MINUTE=100
RATE_LIMIT_BURST=50

# Security Headers (production)
SECURITY_HEADERS_ENABLED=true
HSTS_MAX_AGE=31536000

#####################################
# Monitoring & Health Checks
#####################################
ENABLE_METRICS=false
METRICS_PORT=9090
HEALTHCHECK_ENABLED=true
HEALTHCHECK_INTERVAL=30s

#####################################
# Backup Configuration (Production)
#####################################
BACKUP_ENABLED=false
BACKUP_SCHEDULE="0 2 * * *" # Daily at 2 AM
BACKUP_RETENTION_DAYS=7
BACKUP_S3_BUCKET=my-backups
BACKUP_S3_ACCESS_KEY=
BACKUP_S3_SECRET_KEY=
BACKUP_S3_ENDPOINT=s3.amazonaws.com

#####################################
# Backend Services Configuration
#####################################
# Enable the services directory structure
SERVICES_ENABLED=false

# NestJS Services
NESTJS_ENABLED=false
NESTJS_USE_TYPESCRIPT=true  # Use TypeScript (true) or JavaScript (false)
NESTJS_PORT_START=3100      # Starting port for NestJS services
# Hello world example: actions-api (for Hasura actions with weather data)
NESTJS_SERVICES=actions-api

# BullMQ Queue Workers (requires Redis)
BULLMQ_ENABLED=false
BULLMQ_DASHBOARD_ENABLED=true
BULLMQ_DASHBOARD_PORT=3200
BULLMQ_DASHBOARD_ROUTE=queues.${BASE_DOMAIN}
# Hello world example: weather-processor,currency-processor
BULLMQ_WORKERS=weather-processor,currency-processor

# GoLang Services
GOLANG_ENABLED=false
GOLANG_PORT_START=3300      # Starting port for Go services
# Hello world example: currency-fetcher (high-performance data fetcher)
GOLANG_SERVICES=currency-fetcher

# Python/R Services (ML/AI/Data Science)
PYTHON_ENABLED=false
PYTHON_FRAMEWORK=fastapi    # Options: fastapi, flask, django
PYTHON_PORT_START=3400      # Starting port for Python services
# Hello world example: data-analyzer (ML/AI for trend analysis)
PYTHON_SERVICES=data-analyzer

# Shared service configuration
SERVICES_NETWORK=${PROJECT_NAME}_services
SERVICES_LOG_LEVEL=info

#####################################
# Advanced Configuration
#####################################
# Docker network
DOCKER_NETWORK=${PROJECT_NAME}_network

# Database Pool Settings
DATABASE_POOL_SIZE=25
DATABASE_CONNECTION_TIMEOUT=10
DATABASE_IDLE_TIMEOUT=180
DATABASE_MAX_LIFETIME=600

# Log Levels: debug, info, warn, error
LOG_LEVEL=info

#####################################
# Database Schema Management
#####################################
# Local DBML file for database schema definition
# A sample schema.dbml will be created on 'nself build'
LOCAL_SCHEMA_FILE=schema.dbml

# Optional: dbdiagram.io URL for visual schema editing
# Lead developers can sync from dbdiagram.io with 'nself db sync'
# DBDIAGRAM_URL=https://dbdiagram.io/d/your-project-id

# Database Workflow:
# Lead Developer: Edit schema.dbml → 'nself db run' → commit migrations
# All Developers: Pull from Git → 'nself up' → 'nself db update' if needed

# Timezone
TZ=UTC