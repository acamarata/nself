#!/usr/bin/env bash
# database.sh - Database configuration generation for build

# Generate database initialization
generate_database_init() {
  local force="${1:-false}"

  # Check if init-db.sql already exists
  if [[ "$force" != "true" ]] && [[ -f "init-db.sql" ]]; then
    show_info "Database initialization already exists (use --force to regenerate)"
    return 0
  fi

  # Generate init-db.sql
  generate_init_sql

  return 0
}

# Generate init-db.sql
generate_init_sql() {
  local project_name="${PROJECT_NAME:-myproject}"
  local postgres_db="${POSTGRES_DB:-${project_name}_db}"

  cat > init-db.sql <<EOF
-- Database initialization for ${project_name}
-- Generated by nself build

-- Create database if not exists
SELECT 'CREATE DATABASE ${postgres_db}'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${postgres_db}')\\gexec

-- Connect to the database
\\c ${postgres_db};

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "citext";

EOF

  # Add Hasura-specific setup if enabled
  if [[ "${HASURA_ENABLED:-false}" == "true" ]]; then
    add_hasura_database_setup
  fi

  # Add Auth-specific setup if enabled
  if [[ "${AUTH_ENABLED:-false}" == "true" ]]; then
    add_auth_database_setup
  fi

  # Add Storage-specific setup if enabled
  if [[ "${STORAGE_ENABLED:-false}" == "true" ]]; then
    add_storage_database_setup
  fi

  # Add custom database setup if exists
  if [[ -f "database/custom-init.sql" ]]; then
    echo "" >> init-db.sql
    echo "-- Custom database initialization" >> init-db.sql
    cat database/custom-init.sql >> init-db.sql
  fi

  # Add PostGIS if enabled
  if [[ "${POSTGIS_ENABLED:-false}" == "true" ]]; then
    add_postgis_setup
  fi

  # Add TimescaleDB if enabled
  if [[ "${TIMESCALE_ENABLED:-false}" == "true" ]]; then
    add_timescale_setup
  fi

  # Add vector extensions for AI/ML if enabled
  if [[ "${VECTOR_ENABLED:-false}" == "true" ]]; then
    add_vector_extensions
  fi

  # Add financial extensions if enabled
  if [[ "${FINANCIAL_ENABLED:-false}" == "true" ]]; then
    add_financial_extensions
  fi
}

# Add Hasura database setup
add_hasura_database_setup() {
  cat >> init-db.sql <<'EOF'

-- Hasura metadata schema
CREATE SCHEMA IF NOT EXISTS hdb_catalog;

-- Hasura webhook schema
CREATE SCHEMA IF NOT EXISTS public;

-- Grant permissions
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA hdb_catalog TO postgres;

EOF
}

# Add Auth database setup
add_auth_database_setup() {
  cat >> init-db.sql <<'EOF'

-- Auth schema
CREATE SCHEMA IF NOT EXISTS auth;

-- Users table
CREATE TABLE IF NOT EXISTS auth.users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email CITEXT UNIQUE NOT NULL,
    password_hash TEXT,
    display_name TEXT,
    avatar_url TEXT,
    disabled BOOLEAN DEFAULT false,
    email_verified BOOLEAN DEFAULT false,
    phone_number TEXT,
    phone_number_verified BOOLEAN DEFAULT false,
    default_role TEXT DEFAULT 'user',
    allowed_roles TEXT[] DEFAULT ARRAY['user'],
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Refresh tokens table
CREATE TABLE IF NOT EXISTS auth.refresh_tokens (
    refresh_token UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    expires_at TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_users_email ON auth.users(email);
CREATE INDEX IF NOT EXISTS idx_refresh_tokens_user_id ON auth.refresh_tokens(user_id);
CREATE INDEX IF NOT EXISTS idx_refresh_tokens_expires_at ON auth.refresh_tokens(expires_at);

-- Update timestamp trigger
CREATE OR REPLACE FUNCTION auth.update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON auth.users
    FOR EACH ROW
    EXECUTE FUNCTION auth.update_updated_at();

EOF
}

# Add Storage database setup
add_storage_database_setup() {
  cat >> init-db.sql <<'EOF'

-- Storage schema
CREATE SCHEMA IF NOT EXISTS storage;

-- Buckets table
CREATE TABLE IF NOT EXISTS storage.buckets (
    id TEXT PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    public BOOLEAN DEFAULT false,
    file_size_limit INTEGER,
    allowed_mime_types TEXT[],
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Files table
CREATE TABLE IF NOT EXISTS storage.files (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    bucket_id TEXT NOT NULL REFERENCES storage.buckets(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    size INTEGER NOT NULL,
    mime_type TEXT,
    etag TEXT,
    is_uploaded BOOLEAN DEFAULT false,
    uploaded_by_user_id UUID,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(bucket_id, name)
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_files_bucket_id ON storage.files(bucket_id);
CREATE INDEX IF NOT EXISTS idx_files_uploaded_by ON storage.files(uploaded_by_user_id);
CREATE INDEX IF NOT EXISTS idx_files_created_at ON storage.files(created_at);

-- Default buckets
INSERT INTO storage.buckets (id, name, public)
VALUES
    ('avatars', 'avatars', true),
    ('uploads', 'uploads', false)
ON CONFLICT DO NOTHING;

EOF
}

# Add PostGIS setup
add_postgis_setup() {
  cat >> init-db.sql <<'EOF'

-- PostGIS extension for geospatial data
CREATE EXTENSION IF NOT EXISTS postgis;
CREATE EXTENSION IF NOT EXISTS postgis_topology;
CREATE EXTENSION IF NOT EXISTS postgis_raster;

EOF
}

# Add TimescaleDB setup
add_timescale_setup() {
  cat >> init-db.sql <<'EOF'

-- TimescaleDB extension for time-series data
CREATE EXTENSION IF NOT EXISTS timescaledb;

EOF
}

# Add vector extensions
add_vector_extensions() {
  cat >> init-db.sql <<'EOF'

-- Vector extension for AI/ML embeddings
CREATE EXTENSION IF NOT EXISTS vector;

-- Full text search extensions
CREATE EXTENSION IF NOT EXISTS pg_trgm;
CREATE EXTENSION IF NOT EXISTS unaccent;

EOF
}

# Add financial extensions
add_financial_extensions() {
  cat >> init-db.sql <<'EOF'

-- Financial and crypto extensions
CREATE EXTENSION IF NOT EXISTS "pgcrypto";
CREATE EXTENSION IF NOT EXISTS "btree_gist";
CREATE EXTENSION IF NOT EXISTS "btree_gin";

-- Money handling with proper precision
CREATE DOMAIN money_amount AS NUMERIC(20, 8)
    CHECK (VALUE >= 0);

EOF
}

# Generate database backup script
generate_database_backup_script() {
  cat > backup-db.sh <<'EOF'
#!/usr/bin/env bash
# Database backup script

PROJECT_NAME="${PROJECT_NAME:-myproject}"
POSTGRES_USER="${POSTGRES_USER:-postgres}"
POSTGRES_DB="${POSTGRES_DB:-${PROJECT_NAME}_db}"
BACKUP_DIR="${BACKUP_DIR:-./backups}"

# Create backup directory
mkdir -p "$BACKUP_DIR"

# Generate timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Perform backup
docker exec "${PROJECT_NAME}_postgres" pg_dump \
    -U "$POSTGRES_USER" \
    -d "$POSTGRES_DB" \
    -f "/tmp/backup_${TIMESTAMP}.sql"

# Copy backup to host
docker cp "${PROJECT_NAME}_postgres:/tmp/backup_${TIMESTAMP}.sql" \
    "$BACKUP_DIR/backup_${TIMESTAMP}.sql"

# Compress backup
gzip "$BACKUP_DIR/backup_${TIMESTAMP}.sql"

echo "Backup created: $BACKUP_DIR/backup_${TIMESTAMP}.sql.gz"

# Clean up old backups (keep last 7 days)
find "$BACKUP_DIR" -name "backup_*.sql.gz" -mtime +7 -delete
EOF

  chmod +x backup-db.sh
}

# Export functions
export -f generate_database_init
export -f generate_init_sql
export -f add_hasura_database_setup
export -f add_auth_database_setup
export -f add_storage_database_setup
export -f add_postgis_setup
export -f add_timescale_setup
export -f add_vector_extensions
export -f add_financial_extensions
export -f generate_database_backup_script