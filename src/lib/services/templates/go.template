package main

// {{SERVICE_NAME}} Service - Go
// Auto-generated by nself

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"
)

const ServiceName = "{{SERVICE_NAME}}"
const Version = "1.0.0"

type HealthResponse struct {
	Status    string    `json:"status"`
	Service   string    `json:"service"`
	Timestamp time.Time `json:"timestamp"`
}

type ServiceResponse struct {
	Service string `json:"service"`
	Version string `json:"version"`
	Message string `json:"message"`
}

type DataResponse struct {
	Example   string    `json:"example"`
	Timestamp time.Time `json:"timestamp"`
}

func healthHandler(w http.ResponseWriter, r *http.Request) {
	response := HealthResponse{
		Status:    "healthy",
		Service:   ServiceName,
		Timestamp: time.Now().UTC(),
	}
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func indexHandler(w http.ResponseWriter, r *http.Request) {
	response := ServiceResponse{
		Service: ServiceName,
		Version: Version,
		Message: "Service is running",
	}
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func dataHandler(w http.ResponseWriter, r *http.Request) {
	// Add your business logic here
	response := DataResponse{
		Example:   "data",
		Timestamp: time.Now().UTC(),
	}
	
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "{{SERVICE_PORT}}"
	}
	
	http.HandleFunc("/health", healthHandler)
	http.HandleFunc("/", indexHandler)
	http.HandleFunc("/api/data", dataHandler)
	
	log.Printf("%s service starting on port %s", ServiceName, port)
	
	if err := http.ListenAndServe(":"+port, nil); err != nil {
		log.Fatal(err)
	}
}