# ╔═══════════════════════════════════════════════════════╗
# ║            NSELF ENVIRONMENT CONFIGURATION            ║
# ╠═══════════════════════════════════════════════════════╣
# ║ CONFIGURATION PHILOSOPHY:                             ║
# ║ • Smart Defaults: Everything works without changes    ║
# ║ • Auto-Configuration: System adapts based on ENV      ║
# ║ • Full Control: Power users can override ANY setting  ║
# ║ • This file shows ALL options but only set as needed  ║
# ║                                                       ║
# ║   File Loading Order (later overrides earlier):       ║
# ║   1) .env.dev     (team defaults, SHARED)             ║
# ║   2) .env.staging (staging only config, SHARED)       ║
# ║   3) .env.prod    (production only config, SHARED)    ║
# ║   4) .env.secrets (production secrets, not shared)    ║
# ║   5) .env         (LOCAL ONLY priority overrides)     ║
# ╚═══════════════════════════════════════════════════════╝

#####################################
# 🚨 MUST CHANGE - Critical Settings
#####################################
# These values MUST be defined for your project!
# Note this section is the minimum that must be set
# ANY other vars blank or not set will use our defaults

# Your project name (lowercase, no spaces)
PROJECT_NAME=myproject

# Your domain
# Development: localhost or local.nself.org (automatic SSL)
# Production: your-domain.com
BASE_DOMAIN=local.nself.org

# Environment: dev, staging, or prod
ENV=dev

#####################################
# Default Secrets (useful for dev)
#####################################
# 🔐 CHANGE ALL SECRETS IN PRODUCTION!
# Move these to .env.secrets in production
# Note: Database password is defined in PostgreSQL section below
HASURA_GRAPHQL_ADMIN_SECRET=hasura-admin-secret-dev
HASURA_JWT_KEY=development-secret-key-minimum-32-characters-long
MINIO_ROOT_PASSWORD=minioadmin
S3_SECRET_KEY=storage-secret-key-dev

#####################################
# Service Enable Flags
#####################################
# Required Services (always enabled, no config needed)
# PostgreSQL, Hasura, Auth, Nginx are always on

# Optional Services (default: disabled)
REDIS_ENABLED=false
MINIO_ENABLED=false
FUNCTIONS_ENABLED=false
NSELF_ADMIN_ENABLED=false
MLFLOW_ENABLED=false
MAILPIT_ENABLED=false
MEILISEARCH_ENABLED=false
MLFLOW_ENABLED=false

# Custom Services (see section below)
SERVICES_ENABLED=false

#####################################
# PostgreSQL Database
#####################################
POSTGRES_VERSION=16-alpine
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=nself
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres-dev-password
POSTGRES_EXTENSIONS=uuid-ossp,pgcrypto,pg_trgm

#####################################
# Hasura GraphQL Engine
#####################################
HASURA_VERSION=v2.44.0
HASURA_JWT_TYPE=HS256
HASURA_GRAPHQL_ENABLE_CONSOLE=true
HASURA_GRAPHQL_DEV_MODE=true
HASURA_GRAPHQL_ENABLE_TELEMETRY=false
HASURA_GRAPHQL_CORS_DOMAIN=*
HASURA_ROUTE=api.${BASE_DOMAIN}

#####################################
# Hasura Auth Service
#####################################
AUTH_VERSION=0.36.0
AUTH_HOST=auth
AUTH_PORT=4000
AUTH_CLIENT_URL=http://localhost:3000
AUTH_JWT_SECRET=${HASURA_JWT_KEY}
AUTH_JWT_REFRESH_TOKEN_EXPIRES_IN=2592000
AUTH_JWT_ACCESS_TOKEN_EXPIRES_IN=900
AUTH_ACCESS_TOKEN_EXPIRY=15m
AUTH_REFRESH_TOKEN_EXPIRY=7d
AUTH_REFRESH_TOKEN_SECRET=${HASURA_JWT_KEY}-refresh
AUTH_WEBAUTHN_ENABLED=false
AUTH_ROUTE=auth.${BASE_DOMAIN}

# Email Configuration (Development - MailPit)
AUTH_SMTP_HOST=mailpit
AUTH_SMTP_PORT=1025
AUTH_SMTP_USER=""
AUTH_SMTP_PASS=""
AUTH_SMTP_SECURE=false
AUTH_SMTP_SENDER=noreply@${BASE_DOMAIN}

#####################################
# Storage (MinIO + Hasura Storage)
#####################################
STORAGE_VERSION=0.6.1
STORAGE_ROUTE=storage.${BASE_DOMAIN}
STORAGE_CONSOLE_ROUTE=storage-console.${BASE_DOMAIN}
MINIO_ENABLED=true
MINIO_VERSION=latest
MINIO_PORT=9000
MINIO_ROOT_USER=minioadmin
MINIO_DEFAULT_BUCKETS=uploads,public,private,temp
S3_ACCESS_KEY=storage-access-key-dev
S3_BUCKET=nhost
S3_REGION=us-east-1

#####################################
# Nginx Reverse Proxy
#####################################
NGINX_VERSION=alpine
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443
NGINX_CLIENT_MAX_BODY_SIZE=100M
NGINX_GZIP_ENABLED=true
NGINX_RATE_LIMIT=""

#####################################
# SSL Configuration
#####################################
SSL_MODE=local  # Options: local, letsencrypt, custom, none

#####################################
# Custom Backend Services (CS_N Format)
#####################################
# Define custom services using CS_N pattern
# Format: CS_N=name:framework[:port][:route]
#
# Available frameworks (40+ templates):
# JavaScript/TypeScript:
#   - express-js, express-ts    # Express.js API server
#   - fastify-js, fastify-ts    # High-performance web framework
#   - hono-js, hono-ts          # Ultrafast web framework
#   - nest-js, nest-ts          # Enterprise Node.js framework
#   - socketio-js, socketio-ts  # Real-time WebSocket server
#   - temporal-js, temporal-ts  # Workflow orchestration
#   - bullmq-js, bullmq-ts      # Job queue and workers
#   - trpc                      # Type-safe API framework
#   - bun                       # Bun runtime
#   - deno                      # Deno runtime
#
# Python:
#   - fastapi                   # Modern Python API framework
#   - flask                     # Lightweight WSGI framework
#   - django-rest               # Django REST framework
#   - celery                    # Distributed task queue
#   - ray                       # Distributed computing
#   - agent-llm                 # LLM agent service
#   - agent-data                # Data processing agent
#   - agent-vision              # Computer vision service
#
# Go:
#   - gin                       # HTTP web framework
#   - echo                      # High performance framework
#   - fiber                     # Express-inspired framework
#   - grpc                      # gRPC service
#
# Other Languages:
#   - rails (Ruby)              # Ruby on Rails
#   - actix-web (Rust)          # Rust web framework
#   - spring-boot (Java)        # Spring Boot
#   - aspnet (C#)               # ASP.NET Core
#   - laravel (PHP)             # PHP framework
#   - phoenix (Elixir)          # Elixir framework
#   - vapor (Swift)             # Server-side Swift
#   - ktor (Kotlin)             # Kotlin framework
#
# ─────────────────────────────────────
# CS_N Service Definition Examples
# ─────────────────────────────────────
# Format: CS_N=name:framework[:port][:route]
#
# ROUTING BEHAVIOR:
# - No route specified → Internal-only service (no external access)
# - Single word (e.g., "api") → Becomes api.{BASE_DOMAIN}
# - Full domain (e.g., "api.example.com") → Used as-is (auto-detected by dots + TLD)
# - Partial domain (e.g., "api.v2") → Becomes api.v2.{BASE_DOMAIN}
# - NO DOUBLE COLON NEEDED for domains - system auto-detects!
#
# INTERNAL-ONLY SERVICES (no route = no external access):
# CS_1=worker:bullmq-ts                    # Background worker (internal only)
# CS_2=cache:node-ts                       # Cache service (internal only)
# CS_3=processor:fastapi:8001              # Data processor (internal, custom port)
#
# EXTERNAL SERVICES (with routes):
# CS_4=api:express-ts:3000:api             # API at api.{BASE_DOMAIN}
# CS_5=admin:express-ts:3001:admin         # Admin at admin.{BASE_DOMAIN}
#
# AUTO-DETECTED ROUTING (no :: needed!):
# CS_6=webhook:express-ts:3002:webhook.external.com     # Full domain (auto-detected)
# CS_7=api:fastapi:8000:myapi.company.com              # Full domain (auto-detected)
# CS_8=app:express-ts:3003:api.v2                      # Multi-level: api.v2.{BASE_DOMAIN}
# CS_9=web:express-ts::app                             # Port auto-assigned, route: app.{BASE_DOMAIN}
#
# ─────────────────────────────────────
# CS_N Additional Configuration
# ─────────────────────────────────────
# Each service can have additional configuration using CS_N_* variables:
#
# CS_1_PORT=3000                        # Service port (default: 8000 + service number)
# CS_1_ROUTE=api                        # External route (omit for internal-only service)
# CS_1_MEMORY=512M                      # Memory limit (default: 256M)
# CS_1_CPU=0.5                          # CPU cores (default: 0.25)
# CS_1_REPLICAS=2                       # Number of instances (default: 1)
# CS_1_PUBLIC=true                      # Expose via nginx (default: auto based on route)
# CS_1_HEALTHCHECK=/health              # Health endpoint (default: /health)
# CS_1_TABLE_PREFIX=api_                # Database table prefix
# CS_1_REDIS_PREFIX=api:                # Redis key prefix
# CS_1_ENV=NODE_ENV=production,LOG_LEVEL=info  # Additional env vars (comma-separated)
# CS_1_RATE_LIMIT=100                   # Requests per minute
# CS_1_DEV_DOMAIN=api.local.nself.org   # Development domain override
# CS_1_PROD_DOMAIN=api.myapp.com        # Production domain override
#

#####################################
# Frontend Applications
#####################################
# Configure frontend SPAs that consume your backend APIs
# Note: Frontend apps are defined using numbered variables
#
# ─────────────────────────────────────
# Frontend App Configuration
# ─────────────────────────────────────
# Number of frontend apps
# FRONTEND_APP_COUNT=0
#
# For each app (N = 1, 2, 3, etc.):
# FRONTEND_APP_N_DISPLAY_NAME="App Name"
# FRONTEND_APP_N_SYSTEM_NAME=app_system_name
# FRONTEND_APP_N_TABLE_PREFIX=app_
# FRONTEND_APP_N_PORT=3001
# FRONTEND_APP_N_ROUTE=app
# FRONTEND_APP_N_FRAMEWORK=nextjs
# FRONTEND_APP_N_REMOTE_SCHEMA_NAME=app_schema
# FRONTEND_APP_N_REMOTE_SCHEMA_URL=api.app
#
# Example: Two frontend apps
# FRONTEND_APP_COUNT=2
#
# App 1 - Admin Dashboard
# FRONTEND_APP_1_DISPLAY_NAME="Admin Dashboard"
# FRONTEND_APP_1_SYSTEM_NAME=admin
# FRONTEND_APP_1_TABLE_PREFIX=adm_
# FRONTEND_APP_1_PORT=3001
# FRONTEND_APP_1_ROUTE=admin
# FRONTEND_APP_1_FRAMEWORK=nextjs
# FRONTEND_APP_1_REMOTE_SCHEMA_NAME=admin_schema
# FRONTEND_APP_1_REMOTE_SCHEMA_URL=api.admin
#
# App 2 - Customer Portal
# FRONTEND_APP_2_DISPLAY_NAME="Customer Portal"
# FRONTEND_APP_2_SYSTEM_NAME=portal
# FRONTEND_APP_2_TABLE_PREFIX=prt_
# FRONTEND_APP_2_PORT=3002
# FRONTEND_APP_2_ROUTE=portal
# FRONTEND_APP_2_FRAMEWORK=react
# FRONTEND_APP_2_REMOTE_SCHEMA_NAME=portal_schema
# FRONTEND_APP_2_REMOTE_SCHEMA_URL=api.portal

#####################################
# Remote Schemas (GraphQL Federation)
#####################################
# REMOTE_SCHEMAS_ENABLED=false
#
# Define remote GraphQL schemas to federate with Hasura
# Format: REMOTE_SCHEMA_N_* where N = 1, 2, 3, etc.
#
# REMOTE_SCHEMA_1_NAME=external-api
# REMOTE_SCHEMA_1_URL=https://api.external.com/graphql
# REMOTE_SCHEMA_1_HEADERS=x-api-key:secret-key,x-tenant-id:tenant1
#
# REMOTE_SCHEMA_2_NAME=internal-service
# REMOTE_SCHEMA_2_URL=http://service:8000/graphql
# REMOTE_SCHEMA_2_HEADERS=x-hasura-admin-secret:${HASURA_GRAPHQL_ADMIN_SECRET}

#####################################
# Development Settings
#####################################
# DEBUG=false
# LOG_LEVEL=info
# ENABLE_HOT_RELOAD=false
# ENABLE_SOURCE_MAPS=false
#
# Demo/Seed Data (dev only)
# SEED_DATA=false
# DEMO_USERS=false
# DEMO_CONTENT=false

#####################################
# Optional Services Configuration
#####################################

# ─────────────────────────────────────
# Redis Cache
# ─────────────────────────────────────
# REDIS_VERSION=7-alpine
# REDIS_PORT=6379
# REDIS_PASSWORD=""

# ─────────────────────────────────────
# BullMQ (Job Queue & Workers)
# ─────────────────────────────────────
# BULLMQ_ENABLED=false
# BULLMQ_UI_ENABLED=false
# BULLMQ_UI_PORT=3010
# BULLMQ_UI_ROUTE=bullmq.${BASE_DOMAIN}

# ─────────────────────────────────────
# Functions Service
# ─────────────────────────────────────
# FUNCTIONS_PORT=3008
# FUNCTIONS_ROUTE=functions.${BASE_DOMAIN}

# ─────────────────────────────────────
# nself Admin UI
# ─────────────────────────────────────
# ADMIN_PORT=3005
# NSELF_ADMIN_PORT=3100
# NSELF_ADMIN_ROUTE=admin.${BASE_DOMAIN}
# Admin auth configured via 'nself admin password' command

# ─────────────────────────────────────
# MLflow - ML Experiment Tracking
# ─────────────────────────────────────
# MLFLOW_VERSION=2.9.2
# MLFLOW_PORT=5000
# MLFLOW_ROUTE=mlflow.${BASE_DOMAIN}
# MLFLOW_DB_NAME=mlflow
# MLFLOW_ARTIFACTS_BUCKET=mlflow-artifacts
# MLFLOW_AUTH_ENABLED=false
# MLFLOW_AUTH_USERNAME=admin
# MLFLOW_AUTH_PASSWORD=mlflow-admin-password

# ─────────────────────────────────────
# Monitoring Stack (Prometheus + Grafana)
# ─────────────────────────────────────
# MONITORING_ENABLED=false
# PROMETHEUS_PORT=9090
# PROMETHEUS_ROUTE=prometheus.${BASE_DOMAIN}
# GRAFANA_PORT=3006
# GRAFANA_ROUTE=grafana.${BASE_DOMAIN}
# GRAFANA_ADMIN_PASSWORD=grafana-admin-password

#####################################
# Search Services
#####################################
# SEARCH_ENABLED=false
# Search Engine Selection
# Options: postgres, meilisearch, typesense, elasticsearch, opensearch, sonic
# SEARCH_ENGINE=postgres
# SEARCH_API_KEY=search-api-key
#
# ─────────────────────────────────────
# MeiliSearch Configuration
# ─────────────────────────────────────
# MEILISEARCH_ENABLED=false
# MEILISEARCH_VERSION=v1.5
# MEILISEARCH_MASTER_KEY=CHANGE_THIS_32_CHAR_KEY
# MEILISEARCH_PORT=7700
# MEILISEARCH_ROUTE=search.${BASE_DOMAIN}
#
# ─────────────────────────────────────
# Typesense Configuration
# ─────────────────────────────────────
# TYPESENSE_ENABLED=false
# TYPESENSE_VERSION=0.25.1
# TYPESENSE_API_KEY=CHANGE_THIS_API_KEY
# TYPESENSE_PORT=8108
# TYPESENSE_ROUTE=search.${BASE_DOMAIN}
#
# ─────────────────────────────────────
# Elasticsearch Configuration
# ─────────────────────────────────────
# ELASTICSEARCH_ENABLED=false
# ELASTICSEARCH_VERSION=8.11.0
# ELASTICSEARCH_PORT=9200
# ELASTICSEARCH_MEMORY=2g
#
# ─────────────────────────────────────
# OpenSearch Configuration
# ─────────────────────────────────────
# OPENSEARCH_ENABLED=false
# OPENSEARCH_VERSION=2.11.0
# OPENSEARCH_PORT=9200
# OPENSEARCH_MEMORY=2g

#####################################
# Email Service Providers
#####################################
# Development (default)
EMAIL_PROVIDER=mailpit
MAILPIT_ENABLED=true
MAILPIT_SMTP_PORT=1025
MAILPIT_UI_PORT=8025
MAILPIT_ROUTE=mail.${BASE_DOMAIN}
#
# Production Options:
# EMAIL_PROVIDER=sendgrid|postmark|mailgun|ses|smtp
#
# SendGrid
# SENDGRID_API_KEY=
#
# Postmark
# POSTMARK_API_KEY=
#
# Mailgun
# MAILGUN_API_KEY=
# MAILGUN_DOMAIN=
#
# AWS SES
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=
# AWS_REGION=us-east-1
#
# Custom SMTP
# SMTP_HOST=
# SMTP_PORT=587
# SMTP_USER=
# SMTP_PASS=
# SMTP_SECURE=true

#####################################
# Backup & Recovery
#####################################
# Local Backup Configuration
# BACKUP_DIR=./backups
# BACKUP_ENABLED=true
# BACKUP_SCHEDULE="0 2 * * *"  # Daily at 2 AM
# BACKUP_RETENTION_DAYS=30
#
# Cloud Backup Provider
# Options: s3, dropbox, gdrive, onedrive, rclone
# BACKUP_CLOUD_PROVIDER=
#
# S3/MinIO Backup
# S3_BACKUP_BUCKET=backups
# S3_BACKUP_ENDPOINT=https://s3.amazonaws.com
# S3_BACKUP_ACCESS_KEY=
# S3_BACKUP_SECRET_KEY=
# S3_BACKUP_REGION=us-east-1

#####################################
# Database Administration Tools
#####################################
# For database management, use nself-admin:
# NSELF_ADMIN_ENABLED=true
# NSELF_ADMIN_PORT=3100
# NSELF_ADMIN_ROUTE=admin.${BASE_DOMAIN}

#####################################
# Advanced Configuration
#####################################
# These are typically auto-configured but can be overridden
#
# Database URL (auto-generated)
# HASURA_GRAPHQL_DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
#
# JWT Secret (auto-generated from HASURA_JWT_KEY and HASURA_JWT_TYPE)
# HASURA_GRAPHQL_JWT_SECRET='{"type":"${HASURA_JWT_TYPE}","key":"${HASURA_JWT_KEY}"}'
#
# Docker Network
# DOCKER_NETWORK=${PROJECT_NAME}_network
#
# Internal Service Ports (usually don't need to change)
# HASURA_PORT=8080
# HASURA_CONSOLE_PORT=9695
# FUNCTIONS_PORT=3000
# STORAGE_PORT=5001
#
# S3 Endpoint (internal)
# S3_ENDPOINT=http://minio:${MINIO_PORT}

#####################################
# Environment-Specific Settings
#####################################
# These are automatically configured based on ENV value
# but can be explicitly overridden
#
# Development (ENV=dev):
# - Lenient security
# - Verbose logging
# - All consoles enabled
# - No SSL required
# - Weekly backups
# - Auto-fix enabled
#
# Staging (ENV=staging):
# - Balanced security
# - Standard logging
# - SSL preferred
# - Daily backups
# - Optional encryption
#
# Production (ENV=prod):
# - Strict security
# - Minimal logging
# - Consoles disabled
# - SSL required
# - Daily backups
# - Encryption enabled
# - PITR enabled
# - Audit logging

#####################################
# PostgreSQL Extensions Reference
#####################################
# Core Extensions (always available):
# - uuid-ossp: UUID generation
# - pgcrypto: Cryptographic functions
# - citext: Case-insensitive text
# - hstore: Key-value store
# - pg_trgm: Trigram text search
# - btree_gin/gist: Advanced indexing
#
# Specialized Extensions:
# - postgis: Geospatial data
# - timescaledb: Time-series data
# - pgvector: Vector similarity search
# - citus: Distributed PostgreSQL
# - pg_cron: Job scheduling
# - pg_partman: Partition management
#
# Full list: Set POSTGRES_EXTENSIONS with comma-separated values