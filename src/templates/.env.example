# ╔═══════════════════════════════════════════════════════╗
# ║            NSELF ENVIRONMENT CONFIGURATION            ║
# ╠═══════════════════════════════════════════════════════╣
# ║ CONFIGURATION PHILOSOPHY:                             ║
# ║ • Smart Defaults: Everything works without changes    ║
# ║ • Auto-Configuration: System adapts based on ENV      ║
# ║ • Full Control: Power users can override ANY setting  ║
# ║ • This file shows ALL options but only set as needed  ║
# ║                                                       ║
# ║   File Loading Order (later overrides earlier):       ║
# ║   1) .env.dev     (team defaults, SHARED)             ║
# ║   2) .env.staging (staging only config, SHARED)       ║
# ║   3) .env.prod    (production only config, SHARED)    ║
# ║   4) .env.secrets (production secrets, not shared)    ║
# ║   5) .env         (LOCAL ONLY priority overrides)     ║
# ╚═══════════════════════════════════════════════════════╝

#####################################
# 🚨 MUST CHANGE - Critical Settings
#####################################
# These values MUST be defined for your project!
# Note this section is the minimum that must be set
# ANY other vars blank or not set will use our defaults

# Your project name (lowercase, no spaces)
PROJECT_NAME=myproject

# Your domain
# Development: locahost or local.nself.org (automatic SSL)
# Production: your-domain.com
BASE_DOMAIN=local.nself.org

# Environment: dev or prod
ENV=dev

#####################################
# Default Secrets (useful for dev)
#####################################
# 🔐 CHANGE ALL SECRETS IN PRODUCTION!
# Move these to .env.secrets in production
# Note: Database password is defined in PostgreSQL section below
HASURA_GRAPHQL_ADMIN_SECRET=hasura-admin-secret-dev
HASURA_JWT_KEY=development-secret-key-minimum-32-characters-long
MINIO_ROOT_PASSWORD=minioadmin
S3_SECRET_KEY=storage-secret-key-dev

#####################################
# Configuration Profiles
#####################################
# 
# QUICK PROFILES (Set ENV and get automatic configuration):
#
# ENV=dev (Development - Default)
#   → Lenient security, verbose logging, all consoles enabled
#   → No SSL required, weekly backups, no encryption
#   → Auto-fix enabled, helpful error messages
#
# ENV=staging 
#   → Balanced security, standard logging
#   → SSL preferred, daily backups, optional encryption
#   → Production-like but with debugging
#
# ENV=prod (Production)
#   → Strict security, minimal logging, consoles disabled  
#   → SSL required, daily backups, encryption enabled
#   → PITR enabled, audit logging, monitoring active
#
# Or override individual settings below for custom configuration

#####################################
# Core Configuration
#####################################

# Database Seeding Strategy
# true: Hasura/PostgreSQL standard (common/ + env-specific)
# false: Single default/ directory for all environments
DB_ENV_SEEDS=true

# Always Auto-fix
# true: Lets nself auto-fix any issues it encounters (default)
# false: Any misconfigurations will crash and require manual fixing
ALWAYS_AUTOFIX=true

#####################################
# PostgreSQL Database
#####################################
POSTGRES_VERSION=16-alpine
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=nself
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres-dev-password
POSTGRES_EXTENSIONS=uuid-ossp
# See bottom for a complete list of extensions supported

# ─────────────────────────────────────
# Database Performance & Tuning
# ─────────────────────────────────────
# 
# PHILOSOPHY: Smart defaults with full override capability
# - Leave as "auto" or unset = Smart configuration based on your environment
# - Set specific values = Full control for advanced users
# - ENV=prod automatically enables security features
#
# Connection Pooling (PgBouncer auto-enabled if connections > 10)
DB_POOL_MODE=transaction          # transaction, session, statement
DB_POOL_SIZE=25                   # Connections per pool (auto-scales)
DB_MAX_CONNECTIONS=100            # PostgreSQL max connections
DB_POOLER_ENABLED=auto            # auto, true, false (auto detects load)
DB_POOLER_MAX_CLIENT_CONN=1000   # Max pooler client connections
DB_POOLER_RESERVE_POOL_SIZE=5    # Reserve pool for superuser

# Memory Settings (auto-tuned based on container RAM)
DB_SHARED_BUFFERS=auto           # Cache size (auto: 25% of RAM)
DB_WORK_MEM=auto                 # Per-query memory (auto: RAM/connections/4)
DB_MAINTENANCE_WORK_MEM=auto     # VACUUM, CREATE INDEX memory
DB_EFFECTIVE_CACHE_SIZE=auto     # Planner hint (auto: 75% of RAM)
DB_WAL_BUFFERS=auto              # WAL buffer size (auto: 3% of shared_buffers)

# Query Performance
DB_RANDOM_PAGE_COST=1.1          # 1.1 for SSD, 4.0 for HDD
DB_CPU_TUPLE_COST=0.01           # CPU cost per row
DB_EFFECTIVE_IO_CONCURRENCY=200  # Concurrent I/O (1-1000, SSD: 200)
DB_MAX_PARALLEL_WORKERS=auto     # Parallel workers (auto: CPU cores)
DB_MAX_PARALLEL_WORKERS_PER_GATHER=2 # Workers per query
DB_JIT=on                        # JIT compilation for queries
DB_JIT_ABOVE_COST=100000        # JIT threshold

# Query Timeouts & Limits
DB_STATEMENT_TIMEOUT=30s         # Max query execution time
DB_LOCK_TIMEOUT=10s              # Max time to wait for lock
DB_IDLE_IN_TRANSACTION_TIMEOUT=10min # Disconnect idle transactions
DB_LOG_MIN_DURATION=1000         # Log queries slower than (ms)

# Write Performance
DB_CHECKPOINT_TIMEOUT=5min       # Time between checkpoints
DB_CHECKPOINT_COMPLETION=0.9     # Target completion (0.0-1.0)
DB_WAL_COMPRESSION=on            # Compress WAL
DB_SYNCHRONOUS_COMMIT=on         # Durability vs performance

# ─────────────────────────────────────
# Database Security
# ─────────────────────────────────────
DB_SSL_MODE=auto                 # auto: require in prod, prefer in dev
DB_SSL_CERT=                     # Path to SSL certificate
DB_SSL_KEY=                      # Path to SSL private key
DB_SSL_CA=                       # Path to CA certificate
DB_FORCE_SSL=auto                # Force SSL (auto: true in prod)
DB_ENCRYPT_AT_REST=auto          # Encryption (auto: true in prod)
DB_AUDIT_LOG=auto                # Audit logging (auto: true in prod)
DB_ROW_SECURITY=false            # Row-level security
DB_PASSWORD_ENCRYPTION=scram-sha-256 # md5, scram-sha-256

# ─────────────────────────────────────
# Backup & Recovery
# ─────────────────────────────────────
DB_BACKUP_MODE=auto              # auto, logical, physical, wal
DB_BACKUP_SCHEDULE=auto          # auto: daily in prod, weekly in dev
DB_BACKUP_TIME=02:00             # Time for scheduled backup (24h)
DB_BACKUP_COMPRESSION=auto       # auto detects best: zstd > lz4 > gzip
DB_BACKUP_ENCRYPTION=auto        # auto: true in prod
DB_BACKUP_VERIFY=true            # Verify backup integrity
DB_BACKUP_PARALLEL_JOBS=auto     # Parallel jobs (auto: CPU cores/2)

# Point-in-Time Recovery (PITR)
DB_PITR_ENABLED=auto             # auto: true in prod
DB_PITR_RETENTION_DAYS=7         # WAL archive retention
DB_WAL_ARCHIVE_MODE=auto         # auto: on in prod
DB_WAL_ARCHIVE_DIR=.volumes/wal-archive # WAL archive location
DB_WAL_KEEP_SIZE=1GB             # WAL to keep for streaming

# ─────────────────────────────────────
# High Availability & Replication
# ─────────────────────────────────────
DB_REPLICATION_MODE=none         # none, async, sync, logical
DB_REPLICA_HOST=                 # Replica hostname/IP
DB_REPLICA_PORT=5432             # Replica port
DB_REPLICA_USER=replicator       # Replication user
DB_REPLICA_PASSWORD=             # Replication password
DB_REPLICATION_SLOT=nself_slot   # Logical replication slot
DB_HOT_STANDBY=on                # Allow queries on standby
DB_MAX_WAL_SENDERS=3             # Max replication connections
DB_WAL_LEVEL=replica             # minimal, replica, logical
DB_ARCHIVE_TIMEOUT=300           # Force WAL switch (seconds)

# Failover Configuration
DB_FAILOVER_MODE=manual          # manual, automatic
DB_PROMOTE_TRIGGER_FILE=/tmp/promote # Touch to promote standby
DB_RECOVERY_MIN_APPLY_DELAY=0   # Delayed standby (disaster recovery)

# ─────────────────────────────────────
# Monitoring & Alerting
# ─────────────────────────────────────
DB_MONITORING_ENABLED=auto       # auto: true if monitoring enabled
DB_EXPORTER_ENABLED=auto         # Prometheus exporter
DB_EXPORTER_PORT=9187            # Exporter metrics port
DB_SLOW_QUERY_LOG=auto           # auto: true in prod
DB_LOG_CONNECTIONS=false         # Log all connections
DB_LOG_DISCONNECTIONS=false      # Log all disconnections
DB_LOG_LOCK_WAITS=true           # Log lock waits > deadlock_timeout
DB_LOG_TEMP_FILES=0              # Log temp file usage (bytes, 0=all)
DB_LOG_AUTOVACUUM_MIN_DURATION=0 # Log autovacuum runs (ms)

# Alert Thresholds
DB_ALERT_ON_HIGH_CONNECTIONS=80  # Alert at % of max connections
DB_ALERT_ON_LONG_QUERIES=30000   # Alert on queries > ms
DB_ALERT_ON_REPLICATION_LAG=60   # Alert on lag > seconds
DB_ALERT_ON_CACHE_HIT_RATIO=90   # Alert if cache hit < %
DB_ALERT_ON_DISK_USAGE=80        # Alert at % disk usage

# ─────────────────────────────────────
# Database Maintenance
# ─────────────────────────────────────
DB_AUTOVACUUM=on                 # Automatic VACUUM
DB_AUTOVACUUM_MAX_WORKERS=3      # Parallel vacuum workers
DB_AUTOVACUUM_NAPTIME=1min       # Check interval
DB_AUTOVACUUM_VACUUM_THRESHOLD=50 # Min rows before vacuum
DB_AUTOVACUUM_ANALYZE_THRESHOLD=50 # Min rows before analyze
DB_AUTOVACUUM_VACUUM_SCALE_FACTOR=0.2 # Fraction of table
DB_AUTOVACUUM_ANALYZE_SCALE_FACTOR=0.1 # Fraction for analyze
DB_VACUUM_COST_DELAY=0           # Throttling (ms)
DB_VACUUM_COST_LIMIT=200         # Cost units before sleep

# Maintenance Windows
DB_MAINTENANCE_WINDOW=02:00-06:00 # Preferred maintenance time
DB_AUTO_REINDEX=false            # Automatic index rebuilding
DB_AUTO_CLUSTER=false            # Automatic table clustering
DB_BLOAT_CHECK_ENABLED=true      # Monitor table/index bloat

# ─────────────────────────────────────
# Advanced Features
# ─────────────────────────────────────
#
# The following options are for advanced users who need:
# - Specific performance tuning for their workload
# - Custom security requirements  
# - Integration with existing infrastructure
# - Fine-grained control over every aspect
#
# Most users can ignore these - smart defaults handle 99% of cases
# ─────────────────────────────────────
# Time-series (requires timescaledb extension)
DB_TIMESCALE_ENABLED=false       # Enable TimescaleDB
DB_TIMESCALE_CHUNK_INTERVAL=7d   # Hypertable chunk size
DB_TIMESCALE_RETENTION=90d       # Data retention policy

# Geospatial (requires postgis extension)
DB_POSTGIS_ENABLED=false         # Enable PostGIS
DB_POSTGIS_GDAL_DATA=/usr/share/gdal # GDAL data path

# Vector Search (requires pgvector extension)
DB_VECTOR_ENABLED=false          # Enable pgvector
DB_VECTOR_LISTS=100              # IVF lists for indexing
DB_VECTOR_PROBES=10              # IVF probes for search

# Distributed (requires citus extension)
DB_CITUS_ENABLED=false           # Enable Citus sharding
DB_CITUS_SHARD_COUNT=32          # Number of shards
DB_CITUS_REPLICATION_FACTOR=1    # Shard replication

# Foreign Data
DB_FDW_ENABLED=false             # Foreign data wrappers
DB_LOGICAL_DECODING_ENABLED=false # CDC/logical decoding

#####################################
# Hasura GraphQL Engine
#####################################
HASURA_VERSION=v2.44.0
HASURA_GRAPHQL_ADMIN_SECRET=hasura-admin-secret-dev

# JWT configuration (simpler format - will be converted to JSON automatically)
HASURA_JWT_KEY=development-secret-key-minimum-32-characters-long
HASURA_JWT_TYPE=HS256
# Legacy format (still supported but not recommended):
# HASURA_GRAPHQL_JWT_SECRET='{"type":"HS256","key":"development-secret-key-minimum-32-characters-long"}'
HASURA_GRAPHQL_ENABLE_CONSOLE=true
HASURA_GRAPHQL_DEV_MODE=true
HASURA_GRAPHQL_ENABLE_TELEMETRY=false
HASURA_GRAPHQL_CORS_DOMAIN=*
HASURA_ROUTE=api.${BASE_DOMAIN}

# Remote Schemas (optional)
# REMOTE_SCHEMA_1_NAME=external_api
# REMOTE_SCHEMA_1_URL=https://api.external.com/graphql
# REMOTE_SCHEMA_1_HEADERS=x-api-key:your-api-key

#####################################
# Hasura Auth Service
#####################################
AUTH_VERSION=0.36.0
AUTH_HOST=auth
AUTH_PORT=4000
AUTH_CLIENT_URL=http://localhost:3000
AUTH_JWT_REFRESH_TOKEN_EXPIRES_IN=2592000
AUTH_JWT_ACCESS_TOKEN_EXPIRES_IN=900
AUTH_WEBAUTHN_ENABLED=false
AUTH_ROUTE=auth.${BASE_DOMAIN}

# Email Configuration (Development - MailPit)
AUTH_SMTP_HOST=mailpit
AUTH_SMTP_PORT=1025
AUTH_SMTP_USER=""
AUTH_SMTP_PASS=""
AUTH_SMTP_SECURE=false
AUTH_SMTP_SENDER=noreply@${BASE_DOMAIN}

#####################################
# File Storage (MinIO/S3)
#####################################
STORAGE_VERSION=0.6.1
STORAGE_ROUTE=storage.${BASE_DOMAIN}
STORAGE_CONSOLE_ROUTE=storage-console.${BASE_DOMAIN}
MINIO_VERSION=latest
MINIO_PORT=9000
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=minioadmin
S3_ACCESS_KEY=storage-access-key-dev
S3_SECRET_KEY=storage-secret-key-dev
S3_BUCKET=nself
S3_REGION=us-east-1

#####################################
# Nginx Proxy Configuration
#####################################
NGINX_VERSION=alpine
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443

#####################################
# SSL/TLS Configuration
#####################################
# Modes: local, letsencrypt, custom, none
SSL_MODE=local
# LETSENCRYPT_EMAIL=admin@yourdomain.com
# LETSENCRYPT_STAGING=true
# SSL_CERT_PATH=/path/to/cert.pem
# SSL_KEY_PATH=/path/to/key.pem

#####################################
# Optional Services
#####################################

# Functions Service
FUNCTIONS_ENABLED=false
FUNCTIONS_ROUTE=functions.${BASE_DOMAIN}

# Dashboard
DASHBOARD_ENABLED=false
DASHBOARD_VERSION=latest
DASHBOARD_ROUTE=dashboard.${BASE_DOMAIN}

# nself Admin UI
NSELF_ADMIN_ENABLED=false
NSELF_ADMIN_PORT=3100
NSELF_ADMIN_ROUTE=admin.${BASE_DOMAIN}
# Admin authentication
# ADMIN_PASSWORD_HASH=  # Generated by 'nself admin password'
# ADMIN_SECRET_KEY=      # Generated automatically

#####################################
# Redis Cache
REDIS_ENABLED=false
REDIS_VERSION=7-alpine
REDIS_PORT=6379
REDIS_PASSWORD=""

#####################################
# ML/AI Services
#####################################
# MLflow - ML Experiment Tracking & Model Registry
MLFLOW_ENABLED=false
MLFLOW_VERSION=2.9.2
MLFLOW_PORT=5000
MLFLOW_ROUTE=mlflow.${BASE_DOMAIN}

# MLflow Storage Configuration
# Uses existing PostgreSQL for metadata
MLFLOW_DB_NAME=mlflow
# Uses existing MinIO for artifacts
MLFLOW_ARTIFACTS_BUCKET=mlflow-artifacts
MLFLOW_TRACKING_URI=http://mlflow:${MLFLOW_PORT}
MLFLOW_BACKEND_STORE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${MLFLOW_DB_NAME}
MLFLOW_ARTIFACT_ROOT=s3://${MLFLOW_ARTIFACTS_BUCKET}/

# MLflow Authentication (optional)
MLFLOW_AUTH_ENABLED=false
MLFLOW_ADMIN_USERNAME=admin
MLFLOW_ADMIN_PASSWORD=""  # Set in .env.secrets

# MLflow Resource Limits
MLFLOW_MEMORY_LIMIT=2Gi
MLFLOW_CPU_LIMIT=1000m

# MLflow Features
MLFLOW_SERVE_ARTIFACTS=true
MLFLOW_ENABLE_SYSTEM_METRICS=true
MLFLOW_WORKERS=4

#####################################
# Development Tools
#####################################
# MailPit (Email Testing)
# Catches all emails in development
EMAIL_PROVIDER=mailpit
MAILPIT_ENABLED=true
MAILPIT_SMTP_PORT=1025
MAILPIT_UI_PORT=8025
MAILPIT_ROUTE=mail.${BASE_DOMAIN}
EMAIL_FROM=noreply@${BASE_DOMAIN}

# Adminer (Database UI)
# ADMINER_ENABLED=false
# ADMINER_PORT=8090
# ADMINER_ROUTE=db.${BASE_DOMAIN}
# ADMINER_DESIGN=pepa-linha  # UI theme

# pgAdmin (PostgreSQL Management)
# PGADMIN_ENABLED=false
# PGADMIN_PORT=5050
# PGADMIN_ROUTE=pgadmin.${BASE_DOMAIN}
# PGADMIN_DEFAULT_EMAIL=admin@${BASE_DOMAIN}
# PGADMIN_DEFAULT_PASSWORD=CHANGE_THIS

#####################################
# Custom Services (CS_N)
#####################################
# Define backend services using CS_N=name,framework[,port]
#
# Available Frameworks:
# ┌─────────┬──────────────────────┬─────────┬────────────────────┐
# │ Vanilla │ Description          │ Popular │ Description        │
# ├─────────┼──────────────────────┼─────────┼────────────────────┤
# │ js      │ Node.js + Express    │ nest    │ NestJS            │
# │ py      │ Python + FastAPI     │ django  │ Django            │
# │ go      │ Go + Gin            │ flask   │ Flask             │
# │ rb      │ Ruby + Sinatra      │ rails   │ Ruby on Rails     │
# │ php     │ PHP + Slim          │ laravel │ Laravel           │
# │ java    │ Java + Spring Boot  │ fastify │ Fastify           │
# │ cs      │ C# + ASP.NET Core   │ fiber   │ Fiber (Go)        │
# │ rs      │ Rust + Actix        │ echo    │ Echo (Go)         │
# │ lua     │ Lua + OpenResty     │ spring  │ Spring Boot       │
# │ ex      │ Elixir + Phoenix    │ bull    │ BullMQ worker     │
# │ ts      │ TypeScript + Deno   │ celery  │ Celery worker     │
# └─────────┴──────────────────────┴─────────┴────────────────────┘

# ─── Minimal Example ───
# CS_1=api,js                        # Express API on auto-port

# ─── Standard Examples ───
# CS_1=api,nest                      # NestJS microservice
# CS_1_PORT=3000                     # Port (default: 8001+)
# CS_1_ROUTE=api                     # Route: api.${BASE_DOMAIN}

# CS_2=metals,py                     # Python FastAPI
# CS_2_PORT=8001
# CS_2_ROUTE=metals.api              # metals.api.${BASE_DOMAIN}

# CS_3=worker,bull                   # Background jobs
# CS_3_PUBLIC=false                  # Internal only

# ─── Full Configuration Example ───
# CS_1=backend,nest
# CS_1_PORT=3000                     # Service port
# CS_1_ROUTE=api                     # Subdomain routing
# CS_1_MEMORY=2G                     # Memory limit
# CS_1_CPU=2                         # CPU cores
# CS_1_REPLICAS=2                    # Number of instances
# CS_1_TABLE_PREFIX=api_             # Database table prefix
# CS_1_REDIS_PREFIX=api:             # Redis key prefix  
# CS_1_PUBLIC=true                   # Expose via nginx
# CS_1_HEALTHCHECK=/health           # Health endpoint
# CS_1_ENV=NODE_ENV=production       # Additional env vars
# CS_1_RATE_LIMIT=100               # Requests per minute
# CS_1_PROD_DOMAIN=api.myapp.com     # Production domain

#####################################
# Search Services
#####################################
# Search Engine Selection
# Options: postgres, meilisearch, typesense, elasticsearch, opensearch, sonic
# SEARCH_ENGINE=postgres

# PostgreSQL FTS (default - no extra container)
# Already included, no additional config needed

# MeiliSearch Configuration
# MEILISEARCH_ENABLED=false
# MEILISEARCH_VERSION=v1.5
# MEILISEARCH_MASTER_KEY=CHANGE_THIS_32_CHAR_KEY
# MEILISEARCH_PORT=7700
# MEILISEARCH_ROUTE=search.${BASE_DOMAIN}

# Typesense Configuration  
# TYPESENSE_ENABLED=false
# TYPESENSE_VERSION=0.25.1
# TYPESENSE_API_KEY=CHANGE_THIS_API_KEY
# TYPESENSE_PORT=8108
# TYPESENSE_ROUTE=search.${BASE_DOMAIN}

# Elasticsearch Configuration
# ELASTICSEARCH_ENABLED=false
# ELASTICSEARCH_VERSION=8.11.0
# ELASTICSEARCH_PORT=9200
# ELASTICSEARCH_MEMORY=2g

# OpenSearch Configuration
# OPENSEARCH_ENABLED=false
# OPENSEARCH_VERSION=2.11.0
# OPENSEARCH_PORT=9200
# OPENSEARCH_MEMORY=2g

# Sonic Configuration (lightweight)
# SONIC_ENABLED=false
# SONIC_VERSION=v1.4.8
# SONIC_PASSWORD=CHANGE_THIS_PASSWORD
# SONIC_PORT=1491


#####################################
# Backup & Recovery
#####################################
# Local Backup Configuration
# BACKUP_DIR=./backups
# BACKUP_ENABLED=true
# BACKUP_SCHEDULE="0 2 * * *"  # Daily at 2 AM
# BACKUP_RETENTION_DAYS=30
# BACKUP_RETENTION_MIN=3        # Minimum backups to keep
# BACKUP_RETENTION_WEEKLY=4     # Weekly backups to keep  
# BACKUP_RETENTION_MONTHLY=12   # Monthly backups to keep

# Cloud Backup Provider
# Options: s3, dropbox, gdrive, onedrive, rclone
# BACKUP_CLOUD_PROVIDER=

# S3/MinIO Backup
# S3_BACKUP_BUCKET=backups
# S3_BACKUP_ENDPOINT=https://s3.amazonaws.com
# S3_BACKUP_ACCESS_KEY=
# S3_BACKUP_SECRET_KEY=
# S3_BACKUP_REGION=us-east-1

# Dropbox Backup
# DROPBOX_TOKEN=
# DROPBOX_FOLDER=/nself-backups

# Google Drive Backup
# GDRIVE_FOLDER_ID=
# GDRIVE_CREDENTIALS_FILE=

# OneDrive Backup
# ONEDRIVE_CLIENT_ID=
# ONEDRIVE_CLIENT_SECRET=
# ONEDRIVE_FOLDER=/nself-backups

# Rclone (Universal Cloud Storage)
# RCLONE_REMOTE=myremote
# RCLONE_PATH=/backups

# Advanced Retention Policies
# BACKUP_RETENTION_POLICY=simple  # simple, gfs (Grandfather-Father-Son), smart
# BACKUP_GFS_DAILY=7
# BACKUP_GFS_WEEKLY=4
# BACKUP_GFS_MONTHLY=12
# BACKUP_GFS_YEARLY=5

#####################################
# Queue & Background Jobs
#####################################
# Redis-based Queue (BullMQ)
# QUEUE_ENABLED=false
# QUEUE_REDIS_HOST=redis
# QUEUE_REDIS_PORT=6379
# QUEUE_CONCURRENCY=5
# QUEUE_DASHBOARD_ENABLED=false
# QUEUE_DASHBOARD_PORT=3001
# QUEUE_DASHBOARD_ROUTE=queues.${BASE_DOMAIN}

#####################################
# Advanced Configuration
#####################################

# Hasura Metadata
HASURA_METADATA_DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# Docker Network
DOCKER_NETWORK=${PROJECT_NAME}_network

# Internal Ports
HASURA_PORT=8080
HASURA_CONSOLE_PORT=9695
FUNCTIONS_PORT=3000
DASHBOARD_PORT=3000

# Service Endpoints
S3_ENDPOINT=http://minio:${MINIO_PORT}
FILES_ROUTE=files.${BASE_DOMAIN}
MAIL_ROUTE=mail.${BASE_DOMAIN}

#####################################
# Frontend Applications
#####################################
# Configure frontend SPAs that consume your backend APIs
# Format: FRONTEND_APPS="name:short:prefix:port,..."

# ─── Minimal Example ───
# FRONTEND_APPS="dashboard:dash:dsh_:3000"

# ─── Standard Example ───
# FRONTEND_APPS="dashboard:dash:dsh_:3000,store:shop:shp_:3001"
#
# DASHBOARD_NAME="Admin Dashboard"            # Display name
# DASHBOARD_BUILD_COMMAND="npm run build"     # Build command
# DASHBOARD_START_COMMAND="npm run dev"       # Dev command
# DASHBOARD_DEV_ROUTE="dashboard.${BASE_DOMAIN}"
# DASHBOARD_PROD_ROUTE="dashboard.myapp.com"
# DASHBOARD_DEPLOY_PROVIDER="vercel"          # vercel, netlify, cloudflare

# ─── Full Configuration Example ───
# FRONTEND_APPS="admin:adm:adm_:3000"
# ADMIN_NAME="Admin Panel"
# ADMIN_TABLE_PREFIX="adm_"                   # Database tables
# ADMIN_DEV_PORT=3000                         # Dev server port
# ADMIN_BUILD_COMMAND="npm run build"
# ADMIN_START_COMMAND="npm run dev"
# ADMIN_DEV_ROUTE="admin.${BASE_DOMAIN}"
# ADMIN_PROD_ROUTE="admin.mycompany.com"
# ADMIN_DEPLOY_PROVIDER="vercel"
# ADMIN_DEPLOY_PROJECT="my-admin"
# ADMIN_REMOTE_SCHEMA=true                    # Hasura remote schema
# ADMIN_REMOTE_SCHEMA_URL="https://api.admin.${BASE_DOMAIN}/graphql"
# ADMIN_ENV_VARS="NEXT_PUBLIC_API_URL=https://api.${BASE_DOMAIN}"
# ADMIN_AUTH_REQUIRED=true
# ADMIN_RATE_LIMIT=100




# Exhaustive List of PostgreSQL Extensions Supported by nself
#
#  Core Extensions (Built into PostgreSQL)
#
#  1. uuid-ossp - UUID generation functions
#  2. pgcrypto - Cryptographic functions
#  3. citext - Case-insensitive text type
#  4. hstore - Key-value store
#  5. pg_trgm - Trigram text search
#  6. btree_gin - GIN index support for common types
#  7. btree_gist - GiST index support for common types
#  8. postgres_fdw - Foreign data wrapper for PostgreSQL
#  9. file_fdw - Foreign data wrapper for files
#  10. pg_stat_statements - Query performance statistics
#  11. tablefunc - Cross tabulation functions
#  12. unaccent - Text search dictionary for unaccented matching
#  13. intarray - Functions for 1-D arrays of integers
#  14. ltree - Hierarchical tree-like structures
#  15. xml2 - XPath querying and XSLT
#  16. fuzzystrmatch - Fuzzy string matching
#  17. cube - Multi-dimensional cubes
#  18. earthdistance - Great circle distance calculations
#  19. isn - International product numbering standards
#  20. lo - Large object maintenance
#  21. pg_buffercache - Examine shared buffer cache
#  22. pg_prewarm - Prewarm buffer cache
#  23. pg_visibility - Visibility map examination
#  24. pgrowlocks - Row locking information
#  25. pgstattuple - Tuple-level statistics
#  26. sslinfo - SSL certificate information
#  27. tsm_system_rows - TABLESAMPLE method SYSTEM_ROWS
#  28. tsm_system_time - TABLESAMPLE method SYSTEM_TIME
#  29. adminpack - Administrative functions
#  30. amcheck - Verify index integrity
#  31. bloom - Bloom filter index
#  32. dblink - Connect to other PostgreSQL databases
#  33. dict_int - Dictionary for integers
#  34. dict_xsyn - Dictionary of synonyms
#  35. pageinspect - Inspect database pages
#  36. pg_freespacemap - Free space map
#  37. pg_surgery - Perform surgery on relation data
#  38. pg_walinspect - Inspect WAL
#
#  Contrib Extensions
#
#  39. pgaudit - Session and object audit logging
#
#  Third-party Extensions (Available in standard images)
#
#  40. timescaledb - Time-series database
#  41. postgis - Geographic information system
#  42. postgis_topology - PostGIS topology support
#  43. postgis_raster - PostGIS raster support
#  44. postgis_tiger_geocoder - PostGIS TIGER geocoder
#  45. address_standardizer - Address standardizer
#  46. address_standardizer_data_us - US address data
#  47. pgrouting - Routing functionality
#  48. pgvector - Vector similarity search
#  49. pg_cron - Job scheduler
#  50. pg_partman - Partition management
#  51. pg_repack - Online table reorganization
#  52. pglogical - Logical replication
#  53. wal2json - WAL to JSON output
#  54. pg_jsonschema - JSON Schema validation
#  55. pg_graphql - GraphQL support
#  56. pg_net - HTTP client
#
#  ❌ Not Available in Standard Image (Require custom PostgreSQL image)
#
#  57. plv8 - JavaScript language
#  58. plpython3u - Python 3 language
#  59. plperlu - Perl language (untrusted)
#  60. pltclu - Tcl language (untrusted)
#  61. plr - R language
#  62. pljava - Java language
#  63. plsh - Shell language
#  64. multicorn - Foreign data wrapper framework
#  65. citus - Distributed PostgreSQL
#  66. age - Graph database
#  67. orioledb - Table storage engine
#  68. pg_lakehouse - Data lakehouse
#
#  Pre-configured Extension Groups for common use cases:
#
#  # Spatial/Geographic
#  POSTGRES_EXTENSIONS=postgis,postgis_topology,postgis_raster,address_standardizer
#
#  # Full-text Search
#  POSTGRES_EXTENSIONS=pg_trgm,unaccent,fuzzystrmatch
#
#  # Performance Monitoring
#  POSTGRES_EXTENSIONS=pg_stat_statements,pg_buffercache,pgstattuple
#
#  # Security & Crypto
#  POSTGRES_EXTENSIONS=pgcrypto,uuid-ossp
#
#  # Time-series Analytics
#  POSTGRES_EXTENSIONS=timescaledb,pg_partman
#
#  # Machine Learning
#  POSTGRES_EXTENSIONS=pgvector,plpython3u
#
#  # Replication
#  POSTGRES_EXTENSIONS=pglogical,wal2json
#
#  How to Use in .env.local
#
#  # Basic web application
#  POSTGRES_EXTENSIONS=uuid-ossp,pgcrypto,citext
#
#  # E-commerce with search
#  POSTGRES_EXTENSIONS=uuid-ossp,pgcrypto,pg_trgm,unaccent,fuzzystrmatch
#
#  # Location-based service
#  POSTGRES_EXTENSIONS=uuid-ossp,postgis,postgis_topology,pgrouting
#
#  # Analytics platform
#  POSTGRES_EXTENSIONS=uuid-ossp,timescaledb,pg_stat_statements
#
#  # AI/ML application
#  POSTGRES_EXTENSIONS=uuid-ossp,pgvector,pgcrypto
#
#  # Everything but the kitchen sink (not recommended)
#  POSTGRES_EXTENSIONS=uuid-ossp,pgcrypto,citext,pg_trgm,timescaledb,postgis,pgvector
#
#  Special Handling Notes
#
#  Based on the build script, some extensions have special handling:
#  - uuid-ossp: Quoted because of the hyphen
#  - timescaledb: Uses CASCADE for dependencies
#  - postgis: Uses CASCADE for dependencies
#  - pgvector: Actually creates as "vector" extension (naming difference)
#
#  Default Extension
#
#  If no POSTGRES_EXTENSIONS is specified, nself defaults to:
#  POSTGRES_EXTENSIONS=uuid-ossp

# ====================================================================
# ADMIN UI CONFIGURATION (v0.3.9+)
# ====================================================================
#
#  Admin Web Interface
#
#  The admin UI provides a web-based interface for managing your nself
#  stack, including service control, configuration editing, database
#  management, and real-time monitoring.
#
#  Enable Admin UI
#
#  Set to true to enable the admin web interface
#  Default: false
ADMIN_ENABLED=false

#  Admin Port
#
#  Port for the admin UI container
#  Default: 3100
ADMIN_PORT=3100

#  Admin Route
#
#  Subdomain for admin UI access
#  Default: admin.${BASE_DOMAIN}
ADMIN_ROUTE=admin.${BASE_DOMAIN}

#  Admin Username
#
#  Username for admin authentication
#  Default: admin
ADMIN_USERNAME=admin

#  Admin Password Hash
#
#  SHA256 hash of the admin password
#  Generate with: echo -n "yourpassword" | sha256sum | cut -d' ' -f1
#  Leave empty for no authentication (not recommended)
ADMIN_PASSWORD_HASH=

#  Admin Secret Key
#
#  Secret key for session encryption (auto-generated if not set)
#  Generate with: openssl rand -hex 32
ADMIN_SECRET_KEY=

#  Admin Session Timeout
#
#  Session timeout in seconds
#  Default: 3600 (1 hour)
ADMIN_SESSION_TIMEOUT=3600

#  Admin 2FA
#
#  Enable two-factor authentication
#  Default: false
ADMIN_2FA_ENABLED=false

#  Admin Allowed IPs
#
#  Comma-separated list of allowed IP addresses
#  Leave empty to allow all IPs
#  Example: 192.168.1.100,10.0.0.5
ADMIN_ALLOWED_IPS=

# ====================================================================
# SEARCH SERVICE CONFIGURATION (v0.3.9+)
# ====================================================================
#
#  Enterprise Search Integration
#
#  nself supports multiple search engines for different use cases:
#  - postgres: PostgreSQL full-text search (no extra container)
#  - meilisearch: Fast, typo-tolerant search (recommended)
#  - typesense: Alternative to MeiliSearch
#  - elasticsearch: Most powerful but resource-intensive
#  - opensearch: Open source Elasticsearch fork
#  - sonic: Lightweight, best for autocomplete
#
#  Enable Search
#
#  Set to true to enable search functionality
#  Default: false
SEARCH_ENABLED=false

#  Search Engine
#
#  Which search engine to use
#  Options: postgres, meilisearch, typesense, elasticsearch, opensearch, sonic
#  Default: postgres
SEARCH_ENGINE=postgres

#  Search Host
#
#  Hostname for the search service
#  Default: search
SEARCH_HOST=search

#  Search Port
#
#  Port for the search service
#  Default depends on engine:
#  - postgres: 5432
#  - meilisearch: 7700
#  - typesense: 8108
#  - elasticsearch: 9200
#  - opensearch: 9200
#  - sonic: 1491
SEARCH_PORT=7700

#  Search API Key
#
#  API key for search service authentication
#  Required for: meilisearch, typesense
#  Optional for: elasticsearch, opensearch
SEARCH_API_KEY=

#  Search Index Prefix
#
#  Prefix for all search indexes
#  Useful for multi-tenant applications
#  Example: myapp_
SEARCH_INDEX_PREFIX=

#  Search Auto Index
#
#  Automatically index data on changes
#  Default: true
SEARCH_AUTO_INDEX=true

#  Search Language
#
#  Default language for search indexing
#  Default: en
SEARCH_LANGUAGE=en

# ====================================================================
# MONITORING CONFIGURATION (v0.3.9+)
# ====================================================================
#
#  Complete Observability Stack
#
#  nself includes a production-grade monitoring stack that automatically
#  scales based on your environment (dev/staging/prod). You can monitor
#  metrics, logs, traces, and set up alerting for your entire stack.
#
#  Smart Defaults Based on ENV Setting
#
#  The monitoring profile automatically adjusts based on your ENV:
#  - ENV=dev     → Minimal profile (metrics only, ~1GB RAM)
#  - ENV=staging → Standard profile (metrics + logs, ~2GB RAM)  
#  - ENV=prod    → Full profile (complete observability, ~3-4GB RAM)
#
#  You can override this behavior with MONITORING_PROFILE.
#
#  Enable Monitoring
#
#  Set to true to enable the monitoring stack
#  Default: false (monitoring is opt-in for simplicity)
MONITORING_ENABLED=false

#  Monitoring Profile
#
#  Override the smart defaults with a specific profile
#  Options: minimal, standard, full, custom
#  - minimal:  Prometheus + Grafana + cAdvisor only
#  - standard: Adds Loki for logs + Node Exporter
#  - full:     Adds Tempo tracing + Alertmanager + all exporters
#  - custom:   Use individual settings below
#  Default: auto (based on ENV setting)
MONITORING_PROFILE=auto

#  Custom Monitoring Components
#
#  When MONITORING_PROFILE=custom, control each component:
#  Note: These are ignored unless using custom profile
MONITORING_METRICS=true        # Prometheus + Grafana (core)
MONITORING_LOGS=true           # Loki + Promtail  
MONITORING_TRACING=true        # Tempo for distributed tracing
MONITORING_ALERTS=true         # Alertmanager for advanced alerting
MONITORING_EXPORTERS=true      # Service-specific exporters

#  Grafana Configuration
#
#  Grafana is your single pane of glass for all monitoring
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin-password-change-me
GRAFANA_ROUTE=grafana.${BASE_DOMAIN}
GRAFANA_PORT=3000
# Set to true to allow anonymous viewing (read-only)
GRAFANA_ANONYMOUS_ENABLED=false
# Grafana theme: dark or light
GRAFANA_DEFAULT_THEME=dark

#  Prometheus Configuration
#
#  Time-series metrics database
PROMETHEUS_ROUTE=prometheus.${BASE_DOMAIN}
PROMETHEUS_PORT=9090
# Data retention period (s=seconds, m=minutes, h=hours, d=days, w=weeks, y=years)
PROMETHEUS_RETENTION=15d
# Scrape interval (how often to collect metrics)
PROMETHEUS_SCRAPE_INTERVAL=15s
# Enable Prometheus web UI (set false for production)
PROMETHEUS_WEB_ENABLE=true

#  Loki Configuration (Logs)
#
#  Lightweight log aggregation
LOKI_ROUTE=loki.${BASE_DOMAIN}
LOKI_PORT=3100
# Log retention period
LOKI_RETENTION=7d
# Maximum log line size
LOKI_MAX_LINE_SIZE=256kb

#  Tempo Configuration (Tracing)
#
#  Distributed tracing for microservices
TEMPO_ROUTE=tempo.${BASE_DOMAIN}
TEMPO_PORT=3200
# Trace retention period
TEMPO_RETENTION=72h
# Sampling rate (1.0 = 100%, 0.1 = 10%)
TEMPO_SAMPLING_RATE=0.1

#  Alertmanager Configuration
#
#  Advanced alert routing and management
ALERTMANAGER_ROUTE=alerts.${BASE_DOMAIN}
ALERTMANAGER_PORT=9093
# Webhook URL for alerts (Slack, Discord, etc)
ALERTMANAGER_WEBHOOK_URL=
# Email configuration for alerts
ALERTMANAGER_EMAIL_TO=
ALERTMANAGER_EMAIL_FROM=alerts@${BASE_DOMAIN}
# PagerDuty integration
ALERTMANAGER_PAGERDUTY_KEY=

#  Resource Limits
#
#  Prevent monitoring from consuming too many resources
#  Format: <number>m for CPU (millicores), <number>Mi/Gi for memory
MONITORING_CPU_LIMIT=2000m      # 2 CPU cores total for monitoring
MONITORING_MEMORY_LIMIT=4Gi     # 4GB RAM total for monitoring

# Individual service limits (auto-adjusted by profile)
PROMETHEUS_MEMORY_LIMIT=1Gi
GRAFANA_MEMORY_LIMIT=512Mi
LOKI_MEMORY_LIMIT=512Mi
TEMPO_MEMORY_LIMIT=512Mi

#  Monitoring Data Storage
#
#  Where to store monitoring data (metrics, logs, traces)
#  Default: Docker volumes (recommended)
#  Alternative: Bind mount paths for specific directories
MONITORING_DATA_PATH=volumes    # or /path/to/monitoring/data

#  Exporters Configuration
#
#  Service-specific metric exporters (auto-enabled based on services)
POSTGRES_EXPORTER_ENABLED=auto  # auto, true, false
REDIS_EXPORTER_ENABLED=auto
NGINX_EXPORTER_ENABLED=auto
BLACKBOX_EXPORTER_ENABLED=false # Uptime monitoring
NODE_EXPORTER_ENABLED=true      # Host metrics

#  Alert Rules
#
#  Pre-configured alert rules
ALERTS_HIGH_CPU=true            # Alert on >80% CPU
ALERTS_HIGH_MEMORY=true         # Alert on >80% memory
ALERTS_DISK_SPACE=true          # Alert on >90% disk usage
ALERTS_SERVICE_DOWN=true        # Alert when services are down
ALERTS_HIGH_ERROR_RATE=true     # Alert on high error rates

#  Monitoring Dashboard Access
#
#  Control who can access monitoring dashboards
#  Options: public, authenticated, vpc
MONITORING_ACCESS=authenticated
# IP whitelist (comma-separated)
MONITORING_ALLOWED_IPS=

# ====================================================================
# DEPLOYMENT CONFIGURATION (v0.3.9+)
# ====================================================================
#
#  SSH Deployment Settings
#
#  Configure automated deployment to VPS servers via SSH
#
#  Deployment Method
#
#  How to deploy the application
#  Options: ssh, docker-swarm, kubernetes
#  Default: ssh
DEPLOY_METHOD=ssh

#  Deploy Host
#
#  Hostname or IP address of the deployment server
#  Example: 165.22.123.45 or myserver.example.com
DEPLOY_HOST=

#  Deploy User
#
#  SSH user for deployment
#  Default: root
DEPLOY_USER=root

#  Deploy Key Path
#
#  Path to SSH private key for authentication
#  Default: ~/.ssh/id_rsa
DEPLOY_KEY_PATH=~/.ssh/id_rsa

#  Deploy Target Directory
#
#  Directory on the server where the app will be deployed
#  Default: /opt/nself
DEPLOY_TARGET_DIR=/opt/nself

#  Deploy Webhook Secret
#
#  Secret for GitHub webhook authentication
#  Generate with: openssl rand -hex 16
DEPLOY_WEBHOOK_SECRET=

#  Deploy Auto SSL
#
#  Automatically configure SSL on the deployment server
#  Default: true
DEPLOY_AUTO_SSL=true

#  Deploy Branch
#
#  Git branch to deploy from
#  Default: main
DEPLOY_BRANCH=main
