# ╔═══════════════════════════════════════════════════════╗
# ║            NSELF ENVIRONMENT CONFIGURATION            ║
# ╠═══════════════════════════════════════════════════════╣
# ║ CONFIGURATION PHILOSOPHY:                             ║
# ║ • Smart Defaults: Everything works without changes    ║
# ║ • Auto-Configuration: System adapts based on ENV      ║
# ║ • Full Control: Power users can override ANY setting  ║
# ║ • This file shows ALL options but only set as needed  ║
# ║                                                       ║
# ║   File Loading Order (later overrides earlier):       ║
# ║   1) .env.dev     (team defaults, SHARED)             ║
# ║   2) .env.staging (staging only config, SHARED)       ║
# ║   3) .env.prod    (production only config, SHARED)    ║
# ║   4) .env.secrets (production secrets, not shared)    ║
# ║   5) .env         (LOCAL ONLY priority overrides)     ║
# ╚═══════════════════════════════════════════════════════╝

#####################################
# 🚨 MUST CHANGE - Critical Settings
#####################################
# These values MUST be defined for your project!
# Note this section is the minimum that must be set
# ANY other vars blank or not set will use our defaults

# Your project name (lowercase, no spaces)
PROJECT_NAME=myproject

# Your domain
# Development: localhost or local.nself.org (automatic SSL)
# Production: your-domain.com
BASE_DOMAIN=local.nself.org

# Environment: dev, staging, or prod
ENV=dev

#####################################
# Default Secrets (useful for dev)
#####################################
# 🔐 CHANGE ALL SECRETS IN PRODUCTION!
# Move these to .env.secrets in production
# Note: Database password is defined in PostgreSQL section below
HASURA_GRAPHQL_ADMIN_SECRET=hasura-admin-secret-dev
HASURA_JWT_KEY=development-secret-key-minimum-32-characters-long
MINIO_ROOT_PASSWORD=minioadmin
S3_SECRET_KEY=storage-secret-key-dev

#####################################
# Service Enable Flags
#####################################
# Core Services (default: enabled)
POSTGRES_ENABLED=true
HASURA_ENABLED=true
AUTH_ENABLED=true
STORAGE_ENABLED=true

# Optional Services (default: disabled)
REDIS_ENABLED=false
FUNCTIONS_ENABLED=false
DASHBOARD_ENABLED=false
NSELF_ADMIN_ENABLED=false
MLFLOW_ENABLED=false

# Custom Services (see section below)
SERVICES_ENABLED=false

#####################################
# PostgreSQL Database
#####################################
POSTGRES_VERSION=16-alpine
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=nself
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres-dev-password
POSTGRES_EXTENSIONS=uuid-ossp,pgcrypto,pg_trgm

#####################################
# Hasura GraphQL Engine
#####################################
HASURA_VERSION=v2.44.0
HASURA_JWT_TYPE=HS256
HASURA_GRAPHQL_ENABLE_CONSOLE=true
HASURA_GRAPHQL_DEV_MODE=true
HASURA_GRAPHQL_ENABLE_TELEMETRY=false
HASURA_GRAPHQL_CORS_DOMAIN=*
HASURA_ROUTE=api.${BASE_DOMAIN}

#####################################
# Hasura Auth Service
#####################################
AUTH_VERSION=0.36.0
AUTH_HOST=auth
AUTH_PORT=4000
AUTH_CLIENT_URL=http://localhost:3000
AUTH_JWT_REFRESH_TOKEN_EXPIRES_IN=2592000
AUTH_JWT_ACCESS_TOKEN_EXPIRES_IN=900
AUTH_WEBAUTHN_ENABLED=false
AUTH_ROUTE=auth.${BASE_DOMAIN}

# Email Configuration (Development - MailPit)
AUTH_SMTP_HOST=mailpit
AUTH_SMTP_PORT=1025
AUTH_SMTP_USER=""
AUTH_SMTP_PASS=""
AUTH_SMTP_SECURE=false
AUTH_SMTP_SENDER=noreply@${BASE_DOMAIN}

#####################################
# Storage (MinIO + Hasura Storage)
#####################################
STORAGE_VERSION=0.6.1
STORAGE_ROUTE=storage.${BASE_DOMAIN}
STORAGE_CONSOLE_ROUTE=storage-console.${BASE_DOMAIN}
MINIO_VERSION=latest
MINIO_PORT=9000
MINIO_ROOT_USER=minioadmin
S3_ACCESS_KEY=storage-access-key-dev
S3_BUCKET=nhost
S3_REGION=us-east-1

#####################################
# Nginx Reverse Proxy
#####################################
NGINX_VERSION=alpine
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443
NGINX_CLIENT_MAX_BODY_SIZE=100M
NGINX_GZIP_ENABLED=true
NGINX_RATE_LIMIT=""

#####################################
# SSL Configuration
#####################################
SSL_MODE=local  # Options: local, letsencrypt, custom, none

#####################################
# Custom Backend Services
#####################################
# Enable custom microservices with automatic Docker container generation
# nself supports Node.js/NestJS, Go, Python, and more frameworks
#
# Master Switch - Set to true to enable custom services
SERVICES_ENABLED=false
#
# ─────────────────────────────────────
# Node.js / NestJS Services
# ─────────────────────────────────────
# Enable NestJS microservices
# NESTJS_ENABLED=false
# NESTJS_SERVICES=api,worker,websocket    # Comma-separated service names
# NESTJS_USE_TYPESCRIPT=true               # Use TypeScript (recommended)
# NESTJS_PORT_START=3100                   # Starting port (increments for each)
#
# Each service gets its own directory: services/nest/<service-name>/
# Auto-generated with package.json, Dockerfile, and starter code
#
# ─────────────────────────────────────
# Go Services
# ─────────────────────────────────────
# Enable Go microservices
# GOLANG_ENABLED=false
# GOLANG_SERVICES=analytics,metrics       # Comma-separated service names
# GOLANG_PORT_START=3200                  # Starting port
#
# Each service gets: services/go/<service-name>/ with go.mod and Dockerfile
#
# ─────────────────────────────────────
# Python Services
# ─────────────────────────────────────
# Enable Python microservices
# PYTHON_ENABLED=false
# PYTHON_SERVICES=ml,data-processor       # Comma-separated service names
# PYTHON_FRAMEWORK=fastapi                # Options: fastapi, flask, django
# PYTHON_PORT_START=3300                  # Starting port
#
# Each service gets: services/python/<service-name>/ with requirements.txt
#
# ─────────────────────────────────────
# BullMQ Workers (Redis-based queues)
# ─────────────────────────────────────
# Enable background job workers
# BULLMQ_ENABLED=false
# BULLMQ_WORKERS=email,notifications      # Worker names
# BULLMQ_DASHBOARD_ENABLED=false
# BULLMQ_DASHBOARD_PORT=4200
# BULLMQ_DASHBOARD_ROUTE=queues.${BASE_DOMAIN}

#####################################
# Frontend Applications
#####################################
# Configure frontend SPAs that consume your backend APIs
# Note: Frontend apps are defined using numbered variables
#
# ─────────────────────────────────────
# Frontend App Configuration
# ─────────────────────────────────────
# Number of frontend apps
# FRONTEND_APP_COUNT=0
#
# For each app (N = 1, 2, 3, etc.):
# FRONTEND_APP_N_DISPLAY_NAME="App Name"
# FRONTEND_APP_N_SYSTEM_NAME=app_system_name
# FRONTEND_APP_N_TABLE_PREFIX=app_
# FRONTEND_APP_N_PORT=3001
# FRONTEND_APP_N_ROUTE=app
# FRONTEND_APP_N_REMOTE_SCHEMA_NAME=app_schema
# FRONTEND_APP_N_REMOTE_SCHEMA_URL=api.app
#
# Example: Two frontend apps
# FRONTEND_APP_COUNT=2
#
# App 1 - Admin Dashboard
# FRONTEND_APP_1_DISPLAY_NAME="Admin Dashboard"
# FRONTEND_APP_1_SYSTEM_NAME=admin
# FRONTEND_APP_1_TABLE_PREFIX=adm_
# FRONTEND_APP_1_PORT=3001
# FRONTEND_APP_1_ROUTE=admin
#
# App 2 - Customer Portal
# FRONTEND_APP_2_DISPLAY_NAME="Customer Portal"
# FRONTEND_APP_2_SYSTEM_NAME=portal
# FRONTEND_APP_2_TABLE_PREFIX=prt_
# FRONTEND_APP_2_PORT=3002
# FRONTEND_APP_2_ROUTE=portal

#####################################
# Optional Services Configuration
#####################################

# ─────────────────────────────────────
# Redis Cache
# ─────────────────────────────────────
# REDIS_VERSION=7-alpine
# REDIS_PORT=6379
# REDIS_PASSWORD=""

# ─────────────────────────────────────
# Functions Service
# ─────────────────────────────────────
# FUNCTIONS_ROUTE=functions.${BASE_DOMAIN}

# ─────────────────────────────────────
# Dashboard
# ─────────────────────────────────────
# DASHBOARD_VERSION=latest
# DASHBOARD_ROUTE=dashboard.${BASE_DOMAIN}

# ─────────────────────────────────────
# nself Admin UI
# ─────────────────────────────────────
# NSELF_ADMIN_PORT=3100
# NSELF_ADMIN_ROUTE=admin.${BASE_DOMAIN}
# Admin auth configured via 'nself admin password' command

# ─────────────────────────────────────
# MLflow - ML Experiment Tracking
# ─────────────────────────────────────
# MLFLOW_VERSION=2.9.2
# MLFLOW_PORT=5000
# MLFLOW_ROUTE=mlflow.${BASE_DOMAIN}
# MLFLOW_DB_NAME=mlflow
# MLFLOW_ARTIFACTS_BUCKET=mlflow-artifacts
# MLFLOW_AUTH_ENABLED=false
# MLFLOW_AUTH_USERNAME=admin
# MLFLOW_AUTH_PASSWORD=mlflow-admin-password

#####################################
# Search Services
#####################################
# Search Engine Selection
# Options: postgres, meilisearch, typesense, elasticsearch, opensearch, sonic
# SEARCH_ENGINE=postgres
#
# ─────────────────────────────────────
# MeiliSearch Configuration
# ─────────────────────────────────────
# MEILISEARCH_ENABLED=false
# MEILISEARCH_VERSION=v1.5
# MEILISEARCH_MASTER_KEY=CHANGE_THIS_32_CHAR_KEY
# MEILISEARCH_PORT=7700
# MEILISEARCH_ROUTE=search.${BASE_DOMAIN}
#
# ─────────────────────────────────────
# Typesense Configuration
# ─────────────────────────────────────
# TYPESENSE_ENABLED=false
# TYPESENSE_VERSION=0.25.1
# TYPESENSE_API_KEY=CHANGE_THIS_API_KEY
# TYPESENSE_PORT=8108
# TYPESENSE_ROUTE=search.${BASE_DOMAIN}
#
# ─────────────────────────────────────
# Elasticsearch Configuration
# ─────────────────────────────────────
# ELASTICSEARCH_ENABLED=false
# ELASTICSEARCH_VERSION=8.11.0
# ELASTICSEARCH_PORT=9200
# ELASTICSEARCH_MEMORY=2g
#
# ─────────────────────────────────────
# OpenSearch Configuration
# ─────────────────────────────────────
# OPENSEARCH_ENABLED=false
# OPENSEARCH_VERSION=2.11.0
# OPENSEARCH_PORT=9200
# OPENSEARCH_MEMORY=2g

#####################################
# Email Service Providers
#####################################
# Development (default)
EMAIL_PROVIDER=mailpit
MAILPIT_SMTP_PORT=1025
MAILPIT_UI_PORT=8025
MAILPIT_ROUTE=mail.${BASE_DOMAIN}
#
# Production Options:
# EMAIL_PROVIDER=sendgrid|postmark|mailgun|ses|smtp
#
# SendGrid
# SENDGRID_API_KEY=
#
# Postmark
# POSTMARK_API_KEY=
#
# Mailgun
# MAILGUN_API_KEY=
# MAILGUN_DOMAIN=
#
# AWS SES
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=
# AWS_REGION=us-east-1
#
# Custom SMTP
# SMTP_HOST=
# SMTP_PORT=587
# SMTP_USER=
# SMTP_PASS=
# SMTP_SECURE=true

#####################################
# Backup & Recovery
#####################################
# Local Backup Configuration
# BACKUP_DIR=./backups
# BACKUP_ENABLED=true
# BACKUP_SCHEDULE="0 2 * * *"  # Daily at 2 AM
# BACKUP_RETENTION_DAYS=30
#
# Cloud Backup Provider
# Options: s3, dropbox, gdrive, onedrive, rclone
# BACKUP_CLOUD_PROVIDER=
#
# S3/MinIO Backup
# S3_BACKUP_BUCKET=backups
# S3_BACKUP_ENDPOINT=https://s3.amazonaws.com
# S3_BACKUP_ACCESS_KEY=
# S3_BACKUP_SECRET_KEY=
# S3_BACKUP_REGION=us-east-1

#####################################
# Database Administration Tools
#####################################
# Adminer (lightweight)
# ADMINER_ENABLED=false
# ADMINER_PORT=8081
# ADMINER_ROUTE=adminer.${BASE_DOMAIN}
#
# pgAdmin (full-featured)
# PGADMIN_ENABLED=false
# PGADMIN_PORT=5050
# PGADMIN_ROUTE=pgadmin.${BASE_DOMAIN}
# PGADMIN_DEFAULT_EMAIL=admin@${BASE_DOMAIN}
# PGADMIN_DEFAULT_PASSWORD=CHANGE_THIS

#####################################
# Advanced Configuration
#####################################
# These are typically auto-configured but can be overridden
#
# Database URL (auto-generated)
# HASURA_GRAPHQL_DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
#
# JWT Secret (auto-generated from HASURA_JWT_KEY and HASURA_JWT_TYPE)
# HASURA_GRAPHQL_JWT_SECRET='{"type":"${HASURA_JWT_TYPE}","key":"${HASURA_JWT_KEY}"}'
#
# Docker Network
# DOCKER_NETWORK=${PROJECT_NAME}_network
#
# Internal Service Ports (usually don't need to change)
# HASURA_PORT=8080
# HASURA_CONSOLE_PORT=9695
# FUNCTIONS_PORT=3000
# DASHBOARD_PORT=3000
# STORAGE_PORT=5001
#
# S3 Endpoint (internal)
# S3_ENDPOINT=http://minio:${MINIO_PORT}

#####################################
# Environment-Specific Settings
#####################################
# These are automatically configured based on ENV value
# but can be explicitly overridden
#
# Development (ENV=dev):
# - Lenient security
# - Verbose logging
# - All consoles enabled
# - No SSL required
# - Weekly backups
# - Auto-fix enabled
#
# Staging (ENV=staging):
# - Balanced security
# - Standard logging
# - SSL preferred
# - Daily backups
# - Optional encryption
#
# Production (ENV=prod):
# - Strict security
# - Minimal logging
# - Consoles disabled
# - SSL required
# - Daily backups
# - Encryption enabled
# - PITR enabled
# - Audit logging

#####################################
# PostgreSQL Extensions Reference
#####################################
# Core Extensions (always available):
# - uuid-ossp: UUID generation
# - pgcrypto: Cryptographic functions
# - citext: Case-insensitive text
# - hstore: Key-value store
# - pg_trgm: Trigram text search
# - btree_gin/gist: Advanced indexing
#
# Specialized Extensions:
# - postgis: Geospatial data
# - timescaledb: Time-series data
# - pgvector: Vector similarity search
# - citus: Distributed PostgreSQL
# - pg_cron: Job scheduling
# - pg_partman: Partition management
#
# Full list: Set POSTGRES_EXTENSIONS with comma-separated values