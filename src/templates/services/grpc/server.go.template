package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"os"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/health"
	"google.golang.org/grpc/health/grpc_health_v1"
	"google.golang.org/grpc/reflection"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// Server implements the service
type server struct {
	UnimplementedServiceServer
}

// GetInfo returns service information
func (s *server) GetInfo(ctx context.Context, req *Empty) (*InfoResponse, error) {
	return &InfoResponse{
		Service:   "{{SERVICE_NAME}}",
		Project:   "{{PROJECT_NAME}}",
		Framework: "gRPC",
		Runtime:   "Go",
		Domain:    "{{BASE_DOMAIN}}",
		Timestamp: timestamppb.Now(),
	}, nil
}

// Echo returns the input message
func (s *server) Echo(ctx context.Context, req *EchoRequest) (*EchoResponse, error) {
	return &EchoResponse{
		Message:   fmt.Sprintf("Echo from {{SERVICE_NAME}}: %s", req.Message),
		Timestamp: timestamppb.Now(),
	}, nil
}

func main() {
	port := os.Getenv("PORT")
	if port == "" {
		port = "50051"
	}

	lis, err := net.Listen("tcp", ":"+port)
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}

	// Create gRPC server
	s := grpc.NewServer()
	
	// Register service
	RegisterServiceServer(s, &server{})
	
	// Register health service
	healthServer := health.NewServer()
	grpc_health_v1.RegisterHealthServer(s, healthServer)
	healthServer.SetServingStatus("{{SERVICE_NAME}}", grpc_health_v1.HealthCheckResponse_SERVING)
	
	// Register reflection service for grpcurl
	reflection.Register(s)

	log.Printf("üöÄ {{SERVICE_NAME}} gRPC server starting on port %s", port)
	log.Printf("üìç Health check: grpc://localhost:%s/grpc.health.v1.Health/Check", port)
	log.Printf("üîç Reflection enabled for grpcurl inspection", port)
	
	if err := s.Serve(lis); err != nil {
		log.Fatalf("Failed to serve: %v", err)
	}
}