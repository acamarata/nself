package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/health"
	"google.golang.org/grpc/health/grpc_health_v1"
	"google.golang.org/grpc/reflection"
)

// Server implements a simple gRPC service
type server struct{}

func main() {
	// Get port from environment
	port := os.Getenv("PORT")
	if port == "" {
		port = "{{PORT}}"
	}

	// Create a listener on TCP port
	lis, err := net.Listen("tcp", ":"+port)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	// Create a gRPC server
	s := grpc.NewServer()

	// Register health service
	healthServer := health.NewServer()
	grpc_health_v1.RegisterHealthServer(s, healthServer)
	healthServer.SetServingStatus("{{SERVICE_NAME}}", grpc_health_v1.HealthCheckResponse_SERVING)

	// Register reflection service on gRPC server
	reflection.Register(s)

	// Start HTTP health endpoint for Docker healthcheck
	go startHTTPHealth(port)

	// Handle shutdown gracefully
	go func() {
		sigint := make(chan os.Signal, 1)
		signal.Notify(sigint, os.Interrupt, syscall.SIGTERM)
		<-sigint

		log.Println("Shutting down gRPC server...")
		s.GracefulStop()
	}()

	// Start server
	log.Printf("gRPC server starting on port %s", port)
	log.Printf("Project: {{PROJECT_NAME}}")
	log.Printf("Service: {{SERVICE_NAME}}")
	log.Printf("Domain: {{BASE_DOMAIN}}")

	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}

// startHTTPHealth starts a simple HTTP health endpoint for Docker
func startHTTPHealth(grpcPort string) {
	httpPort := "8081" // Different port for HTTP health

	http.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		// Check gRPC health
		conn, err := grpc.Dial("localhost:"+grpcPort, grpc.WithTransportCredentials(insecure.NewCredentials()))
		if err != nil {
			w.WriteHeader(http.StatusServiceUnavailable)
			fmt.Fprintf(w, "unhealthy: %v", err)
			return
		}
		defer conn.Close()

		client := grpc_health_v1.NewHealthClient(conn)
		resp, err := client.Check(context.Background(), &grpc_health_v1.HealthCheckRequest{
			Service: "{{SERVICE_NAME}}",
		})

		if err != nil || resp.Status != grpc_health_v1.HealthCheckResponse_SERVING {
			w.WriteHeader(http.StatusServiceUnavailable)
			fmt.Fprint(w, "unhealthy")
			return
		}

		w.WriteHeader(http.StatusOK)
		fmt.Fprint(w, "healthy")
	})

	log.Printf("HTTP health endpoint available at :%s/health", httpPort)
	if err := http.ListenAndServe(":"+httpPort, nil); err != nil {
		log.Printf("HTTP health server error: %v", err)
	}
}