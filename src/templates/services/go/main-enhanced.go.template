package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-redis/redis/v8"
	"github.com/gorilla/mux"
	"github.com/gorilla/websocket"
	_ "github.com/lib/pq"
)

// Service configuration
type Config struct {
	ServiceName string
	Port        string
	PostgresURL string
	RedisURL    string
	LogLevel    string
}

// Global connections
var (
	db       *sql.DB
	rdb      *redis.Client
	upgrader = websocket.Upgrader{
		CheckOrigin: func(r *http.Request) bool {
			// Allow connections from any origin in dev
			// TODO: Restrict in production
			return true
		},
	}
	config Config
	ctx    = context.Background()
)

// WebSocket client
type Client struct {
	conn   *websocket.Conn
	send   chan []byte
	hub    *Hub
}

// WebSocket hub
type Hub struct {
	clients    map[*Client]bool
	broadcast  chan []byte
	register   chan *Client
	unregister chan *Client
}

var hub = &Hub{
	clients:    make(map[*Client]bool),
	broadcast:  make(chan []byte),
	register:   make(chan *Client),
	unregister: make(chan *Client),
}

// Initialize configuration
func initConfig() {
	config = Config{
		ServiceName: getEnv("SERVICE_NAME", "${SERVICE_NAME}"),
		Port:        getEnv("PORT", "${SERVICE_PORT}"),
		PostgresURL: getEnv("DATABASE_URL", "postgres://postgres:password@postgres:5432/postgres?sslmode=disable"),
		RedisURL:    getEnv("REDIS_URL", "redis://:password@redis:6379/0"),
		LogLevel:    getEnv("LOG_LEVEL", "info"),
	}
}

// Helper to get environment variables with defaults
func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// Initialize PostgreSQL connection
func initPostgres() error {
	var err error
	db, err = sql.Open("postgres", config.PostgresURL)
	if err != nil {
		return fmt.Errorf("failed to open database: %w", err)
	}

	// Configure connection pool
	db.SetMaxOpenConns(25)
	db.SetMaxIdleConns(5)
	db.SetConnMaxLifetime(5 * time.Minute)

	// Test connection
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := db.PingContext(ctx); err != nil {
		return fmt.Errorf("failed to ping database: %w", err)
	}

	log.Println("✅ PostgreSQL connected")
	return nil
}

// Initialize Redis connection
func initRedis() error {
	opt, err := redis.ParseURL(config.RedisURL)
	if err != nil {
		return fmt.Errorf("failed to parse Redis URL: %w", err)
	}

	rdb = redis.NewClient(opt)

	// Test connection
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := rdb.Ping(ctx).Err(); err != nil {
		return fmt.Errorf("failed to ping Redis: %w", err)
	}

	log.Println("✅ Redis connected")
	return nil
}

// Health check endpoint
func healthHandler(w http.ResponseWriter, r *http.Request) {
	health := map[string]interface{}{
		"status":  "healthy",
		"service": config.ServiceName,
		"time":    time.Now().UTC(),
		"checks": map[string]string{
			"postgres": "unknown",
			"redis":    "unknown",
		},
	}

	// Check PostgreSQL
	if db != nil {
		if err := db.Ping(); err == nil {
			health["checks"].(map[string]string)["postgres"] = "healthy"
		} else {
			health["checks"].(map[string]string)["postgres"] = "unhealthy"
			health["status"] = "degraded"
		}
	}

	// Check Redis
	if rdb != nil {
		if err := rdb.Ping(ctx).Err(); err == nil {
			health["checks"].(map[string]string)["redis"] = "healthy"
		} else {
			health["checks"].(map[string]string)["redis"] = "unhealthy"
			health["status"] = "degraded"
		}
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(health)
}

// Ready check endpoint
func readyHandler(w http.ResponseWriter, r *http.Request) {
	// Check if all dependencies are ready
	if db == nil || rdb == nil {
		http.Error(w, "Service not ready", http.StatusServiceUnavailable)
		return
	}

	if err := db.Ping(); err != nil {
		http.Error(w, "Database not ready", http.StatusServiceUnavailable)
		return
	}

	if err := rdb.Ping(ctx).Err(); err != nil {
		http.Error(w, "Redis not ready", http.StatusServiceUnavailable)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("Ready"))
}

// WebSocket handler
func wsHandler(w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("WebSocket upgrade failed: %v", err)
		return
	}

	client := &Client{
		conn: conn,
		send: make(chan []byte, 256),
		hub:  hub,
	}

	hub.register <- client

	// Start goroutines for reading and writing
	go client.writePump()
	go client.readPump()
}

// Handle WebSocket reads
func (c *Client) readPump() {
	defer func() {
		c.hub.unregister <- c
		c.conn.Close()
	}()

	c.conn.SetReadDeadline(time.Now().Add(60 * time.Second))
	c.conn.SetPongHandler(func(string) error {
		c.conn.SetReadDeadline(time.Now().Add(60 * time.Second))
		return nil
	})

	for {
		_, message, err := c.conn.ReadMessage()
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				log.Printf("WebSocket error: %v", err)
			}
			break
		}

		// Process message
		log.Printf("Received: %s", message)
		
		// Echo back to all clients
		c.hub.broadcast <- message
	}
}

// Handle WebSocket writes
func (c *Client) writePump() {
	ticker := time.NewTicker(54 * time.Second)
	defer func() {
		ticker.Stop()
		c.conn.Close()
	}()

	for {
		select {
		case message, ok := <-c.send:
			c.conn.SetWriteDeadline(time.Now().Add(10 * time.Second))
			if !ok {
				c.conn.WriteMessage(websocket.CloseMessage, []byte{})
				return
			}

			w, err := c.conn.NextWriter(websocket.TextMessage)
			if err != nil {
				return
			}
			w.Write(message)

			// Add queued messages
			n := len(c.send)
			for i := 0; i < n; i++ {
				w.Write([]byte("\n"))
				w.Write(<-c.send)
			}

			if err := w.Close(); err != nil {
				return
			}

		case <-ticker.C:
			c.conn.SetWriteDeadline(time.Now().Add(10 * time.Second))
			if err := c.conn.WriteMessage(websocket.PingMessage, nil); err != nil {
				return
			}
		}
	}
}

// Run WebSocket hub
func (h *Hub) run() {
	for {
		select {
		case client := <-h.register:
			h.clients[client] = true
			log.Printf("Client connected. Total: %d", len(h.clients))

		case client := <-h.unregister:
			if _, ok := h.clients[client]; ok {
				delete(h.clients, client)
				close(client.send)
				log.Printf("Client disconnected. Total: %d", len(h.clients))
			}

		case message := <-h.broadcast:
			for client := range h.clients {
				select {
				case client.send <- message:
				default:
					close(client.send)
					delete(h.clients, client)
				}
			}
		}
	}
}

// Example API endpoint
func apiHandler(w http.ResponseWriter, r *http.Request) {
	response := map[string]interface{}{
		"service": config.ServiceName,
		"message": "Hello from ${SERVICE_NAME}",
		"time":    time.Now().UTC(),
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// Graceful shutdown
func gracefulShutdown(server *http.Server) {
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)
	<-sigChan

	log.Println("Shutting down gracefully...")

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Close database connections
	if db != nil {
		db.Close()
	}

	// Close Redis connection
	if rdb != nil {
		rdb.Close()
	}

	// Shutdown HTTP server
	if err := server.Shutdown(ctx); err != nil {
		log.Printf("Server shutdown error: %v", err)
	}

	log.Println("Server stopped")
}

func main() {
	// Initialize configuration
	initConfig()

	log.Printf("Starting %s on port %s", config.ServiceName, config.Port)

	// Initialize connections with retry
	for i := 0; i < 10; i++ {
		if err := initPostgres(); err != nil {
			log.Printf("PostgreSQL connection attempt %d failed: %v", i+1, err)
			time.Sleep(5 * time.Second)
			continue
		}
		break
	}

	for i := 0; i < 10; i++ {
		if err := initRedis(); err != nil {
			log.Printf("Redis connection attempt %d failed: %v", i+1, err)
			time.Sleep(5 * time.Second)
			continue
		}
		break
	}

	// Start WebSocket hub
	go hub.run()

	// Setup routes
	router := mux.NewRouter()
	
	// Health and readiness
	router.HandleFunc("/health", healthHandler).Methods("GET")
	router.HandleFunc("/ready", readyHandler).Methods("GET")
	
	// WebSocket endpoint
	router.HandleFunc("/ws", wsHandler)
	
	// API endpoints
	router.HandleFunc("/api", apiHandler).Methods("GET")
	
	// Create HTTP server
	server := &http.Server{
		Addr:         ":" + config.Port,
		Handler:      router,
		ReadTimeout:  15 * time.Second,
		WriteTimeout: 15 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// Start server in goroutine
	go func() {
		log.Printf("Server listening on port %s", config.Port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Server failed to start: %v", err)
		}
	}()

	// Handle graceful shutdown
	gracefulShutdown(server)
}