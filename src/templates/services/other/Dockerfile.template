# Custom Service Template for {{SERVICE_NAME}}
# 
# This is a placeholder Dockerfile for custom services.
# Replace this with your actual service implementation.
#
# Examples:
# - For a static website: Use nginx:alpine
# - For a database: Use postgres, mysql, mongodb, etc.
# - For a custom app: Use your preferred base image
#
# Available environment variables:
# - PROJECT_NAME: {{PROJECT_NAME}}
# - SERVICE_NAME: {{SERVICE_NAME}}
# - BASE_DOMAIN: {{BASE_DOMAIN}}

# Example: Simple HTTP server that returns a hello world response
FROM alpine:latest

# Install a simple web server
RUN apk add --no-cache python3

# Create app directory
WORKDIR /app

# Create a simple hello world script
RUN echo '#!/usr/bin/env python3' > server.py && \
    echo 'from http.server import HTTPServer, BaseHTTPRequestHandler' >> server.py && \
    echo 'import json' >> server.py && \
    echo '' >> server.py && \
    echo 'class Handler(BaseHTTPRequestHandler):' >> server.py && \
    echo '    def do_GET(self):' >> server.py && \
    echo '        if self.path == "/health":' >> server.py && \
    echo '            self.send_response(200)' >> server.py && \
    echo '            self.send_header("Content-type", "application/json")' >> server.py && \
    echo '            self.end_headers()' >> server.py && \
    echo '            response = {"status": "healthy", "service": "{{SERVICE_NAME}}"}' >> server.py && \
    echo '            self.wfile.write(json.dumps(response).encode())' >> server.py && \
    echo '        else:' >> server.py && \
    echo '            self.send_response(200)' >> server.py && \
    echo '            self.send_header("Content-type", "application/json")' >> server.py && \
    echo '            self.end_headers()' >> server.py && \
    echo '            response = {' >> server.py && \
    echo '                "message": "Hello from {{SERVICE_NAME}}!",' >> server.py && \
    echo '                "project": "{{PROJECT_NAME}}",' >> server.py && \
    echo '                "type": "custom",' >> server.py && \
    echo '                "info": "Replace this with your actual service"' >> server.py && \
    echo '            }' >> server.py && \
    echo '            self.wfile.write(json.dumps(response).encode())' >> server.py && \
    echo '' >> server.py && \
    echo 'if __name__ == "__main__":' >> server.py && \
    echo '    server = HTTPServer(("0.0.0.0", 3000), Handler)' >> server.py && \
    echo '    print("🚀 {{SERVICE_NAME}} is running on port 3000")' >> server.py && \
    echo '    print("📍 Health check: http://localhost:3000/health")' >> server.py && \
    echo '    server.serve_forever()' >> server.py

RUN chmod +x server.py

EXPOSE 3000

CMD ["python3", "server.py"]