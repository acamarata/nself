from celery import Celery
from datetime import datetime
import os
import time

# Configure Celery
app = Celery('{{SERVICE_NAME}}',
             broker=os.getenv('REDIS_URL', 'redis://redis:6379/0'),
             backend=os.getenv('REDIS_URL', 'redis://redis:6379/0'))

# Celery configuration
app.conf.update(
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='UTC',
    enable_utc=True,
    task_track_started=True,
    task_time_limit=30 * 60,  # 30 minutes
    task_soft_time_limit=25 * 60,  # 25 minutes
)

@app.task(name='{{SERVICE_NAME}}.health_check')
def health_check():
    """Health check task"""
    return {
        'status': 'healthy',
        'service': '{{SERVICE_NAME}}',
        'timestamp': datetime.now().isoformat(),
        'worker': 'celery'
    }

@app.task(name='{{SERVICE_NAME}}.process_item')
def process_item(item_id, data):
    """Process an item asynchronously"""
    print(f"Processing item {item_id} with data: {data}")
    
    # Simulate processing
    time.sleep(2)
    
    return {
        'item_id': item_id,
        'status': 'completed',
        'processed_at': datetime.now().isoformat(),
        'result': f"Processed {data}"
    }

@app.task(name='{{SERVICE_NAME}}.batch_process')
def batch_process(items):
    """Process multiple items in batch"""
    results = []
    for item in items:
        result = process_item.apply_async(args=[item['id'], item['data']])
        results.append(result.id)
    
    return {
        'batch_size': len(items),
        'task_ids': results,
        'submitted_at': datetime.now().isoformat()
    }

@app.task(name='{{SERVICE_NAME}}.scheduled_task')
def scheduled_task():
    """Task that can be scheduled periodically"""
    return {
        'message': 'Scheduled task executed',
        'service': '{{SERVICE_NAME}}',
        'timestamp': datetime.now().isoformat()
    }

# Beat schedule for periodic tasks
app.conf.beat_schedule = {
    'health-check-every-minute': {
        'task': '{{SERVICE_NAME}}.health_check',
        'schedule': 60.0,  # Every minute
    },
    'scheduled-task-every-hour': {
        'task': '{{SERVICE_NAME}}.scheduled_task',
        'schedule': 3600.0,  # Every hour
    },
}

if __name__ == '__main__':
    print("üöÄ {{SERVICE_NAME}} Celery worker starting...")
    print("üìç Broker: " + app.conf.broker_url)
    print("‚öôÔ∏è Tasks: health_check, process_item, batch_process, scheduled_task")
    app.start()