import { Controller, Get, Post, Body } from '@nestjs/common';
import { AppService } from './app.service';

@Controller()
export class AppController {
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello(): string {
    return this.appService.getHello();
  }

  @Get('health')
  async getHealth() {
    // Basic health check
    return {
      status: 'healthy',
      service: '${SERVICE_NAME}',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
    };
  }
  
  @Get('health/live')
  async getLiveHealth() {
    // Check dependencies
    const health = {
      status: 'healthy' as 'healthy' | 'degraded' | 'unhealthy',
      service: '${SERVICE_NAME}',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      checks: {} as Record<string, any>,
    };
    
    // Add dependency checks here
    // Example: Check database connection
    // try {
    //   await this.databaseService.healthCheck();
    //   health.checks.database = { status: 'healthy' };
    // } catch (error) {
    //   health.checks.database = { status: 'unhealthy', error: error.message };
    //   health.status = 'degraded';
    // }
    
    return health;
  }
  
  @Get('health/ready')
  async getReadyHealth() {
    // Comprehensive health with metrics
    const memoryUsage = process.memoryUsage();
    
    return {
      status: 'healthy',
      service: '${SERVICE_NAME}',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      pid: process.pid,
      environment: process.env.NODE_ENV || 'development',
      metrics: {
        memory: {
          rss: `${Math.round(memoryUsage.rss / 1024 / 1024)}MB`,
          heapTotal: `${Math.round(memoryUsage.heapTotal / 1024 / 1024)}MB`,
          heapUsed: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,
        },
        cpu: process.cpuUsage(),
      },
    };
  }

  @Get('status')
  getStatus() {
    return {
      service: '${SERVICE_NAME}',
      status: 'running',
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development',
    };
  }

  // Example Hasura Action endpoint
  @Post('actions/hello')
  async handleHelloAction(@Body() actionPayload: any) {
    const { input, session_variables } = actionPayload;
    
    return {
      message: `Hello ${input.name || 'World'} from ${SERVICE_NAME}!`,
      timestamp: new Date().toISOString(),
      user_id: session_variables?.['x-hasura-user-id'] || null,
    };
  }
}