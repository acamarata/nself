import os
from celery import Celery
from datetime import datetime

# Create Celery instance
app = Celery('{{SERVICE_NAME}}')

# Configure Celery
app.conf.update(
    broker_url=os.environ.get('REDIS_URL', 'redis://redis:6379/0'),
    result_backend=os.environ.get('REDIS_URL', 'redis://redis:6379/0'),
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='UTC',
    enable_utc=True,
    task_track_started=True,
    task_time_limit=30 * 60,  # 30 minutes
    task_soft_time_limit=25 * 60,  # 25 minutes
    worker_prefetch_multiplier=1,
    worker_max_tasks_per_child=1000,
)

# Health check task
@app.task(name='health.check')
def health_check():
    """Health check task"""
    return {
        'status': 'healthy',
        'service': '{{SERVICE_NAME}}',
        'timestamp': datetime.utcnow().isoformat(),
        'worker': 'celery'
    }

# Sample tasks
@app.task(name='tasks.add')
def add(x, y):
    """Add two numbers"""
    return x + y

@app.task(name='tasks.multiply')
def multiply(x, y):
    """Multiply two numbers"""
    return x * y

@app.task(name='tasks.process_data')
def process_data(data):
    """Process data asynchronously"""
    import time
    # Simulate processing
    time.sleep(2)
    return {
        'processed': True,
        'input': data,
        'timestamp': datetime.utcnow().isoformat(),
        'service': '{{SERVICE_NAME}}'
    }

@app.task(name='tasks.long_running')
def long_running_task(duration=10):
    """Simulate a long-running task"""
    import time
    time.sleep(duration)
    return {
        'completed': True,
        'duration': duration,
        'timestamp': datetime.utcnow().isoformat()
    }

# Beat schedule for periodic tasks
app.conf.beat_schedule = {
    'health-check-every-minute': {
        'task': 'health.check',
        'schedule': 60.0,
    },
}

if __name__ == '__main__':
    app.start()