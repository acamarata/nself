package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"go.temporal.io/sdk/client"
	"go.temporal.io/sdk/worker"
	"go.temporal.io/sdk/workflow"
)

// Workflow definition
func SampleWorkflow(ctx workflow.Context, name string) (string, error) {
	ao := workflow.ActivityOptions{
		StartToCloseTimeout: 10 * time.Second,
	}
	ctx = workflow.WithActivityOptions(ctx, ao)

	var result string
	err := workflow.ExecuteActivity(ctx, SampleActivity, name).Get(ctx, &result)
	if err != nil {
		return "", err
	}

	return result, nil
}

// Activity definition
func SampleActivity(ctx context.Context, name string) (string, error) {
	return fmt.Sprintf("Hello from {{SERVICE_NAME}}, %s!", name), nil
}

func main() {
	// Create Temporal client
	c, err := client.Dial(client.Options{
		HostPort: client.DefaultHostPort,
	})
	if err != nil {
		log.Fatalln("Unable to create Temporal client:", err)
	}
	defer c.Close()

	// Create worker
	w := worker.New(c, "{{SERVICE_NAME}}-taskqueue", worker.Options{})

	// Register workflow and activity
	w.RegisterWorkflow(SampleWorkflow)
	w.RegisterActivity(SampleActivity)

	log.Println("üöÄ {{SERVICE_NAME}} Temporal worker started")
	log.Println("üìç Task Queue: {{SERVICE_NAME}}-taskqueue")
	log.Println("‚öôÔ∏è Workflows: SampleWorkflow")
	log.Println("üîß Activities: SampleActivity")

	// Start worker
	err = w.Run(worker.InterruptCh())
	if err != nil {
		log.Fatalln("Unable to start worker:", err)
	}
}