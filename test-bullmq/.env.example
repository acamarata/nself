# ╔══════════════════════════════════════════════════════════════════════════╗
# ║                          NSELF CONFIGURATION REFERENCE                      ║
# ╠══════════════════════════════════════════════════════════════════════════╣
# ║   This file documents ALL available environment variables for nself.        ║
# ║   DO NOT use this file directly - it's for reference only!                 ║
# ║                                                                              ║
# ║   CONFIGURATION PRIORITY (only these files are used):                       ║
# ║   1. .env       (highest priority - production)                            ║
# ║   2. .env.local (development - your main config file)                      ║
# ║   3. .env.dev   (lowest priority - team defaults)                          ║
# ║                                                                              ║
# ║   If .env exists, .env.local and .env.dev are COMPLETELY IGNORED.          ║
# ║   If .env.local exists (no .env), .env.dev is COMPLETELY IGNORED.          ║
# ║                                                                              ║
# ║   💡 TIP: Start with .env.local for development (created by nself init)     ║
# ╚══════════════════════════════════════════════════════════════════════════╝

#####################################
# CORE PROJECT SETTINGS
#####################################

# Environment Mode: dev or prod
# dev = Development mode with dev tools, mock data, debug logging
# prod = Production mode with security hardening, optimizations
ENV=dev

# Project Identifier
# Used for Docker container names, database names, resource prefixes
PROJECT_NAME=myproject

# Base Domain
# All services will be subdomains of this domain
# Development: local.nself.org (automatic SSL)
# Production: your-domain.com
BASE_DOMAIN=local.nself.org

# Database Seeding Strategy
# true: Hasura/PostgreSQL standard (common/ + env-specific)
# false: Single default/ directory for all environments
DB_ENV_SEEDS=true

#####################################
# PostgreSQL Database
#####################################
POSTGRES_VERSION=16-alpine
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=nhost
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres-dev-password
POSTGRES_EXTENSIONS=uuid-ossp
# See bottom for a complete list of extensions supported

#####################################
# Hasura GraphQL Engine
#####################################
HASURA_VERSION=v2.44.0
HASURA_GRAPHQL_ADMIN_SECRET=hasura-admin-secret-dev

# JWT configuration (simpler format - will be converted to JSON automatically)
HASURA_JWT_KEY=development-secret-key-minimum-32-characters-long
HASURA_JWT_TYPE=HS256
# Legacy format (still supported but not recommended):
# HASURA_GRAPHQL_JWT_SECRET='{"type":"HS256","key":"development-secret-key-minimum-32-characters-long"}'
HASURA_GRAPHQL_ENABLE_CONSOLE=true
HASURA_GRAPHQL_DEV_MODE=true
HASURA_GRAPHQL_ENABLE_TELEMETRY=false
HASURA_GRAPHQL_CORS_DOMAIN=*
HASURA_ROUTE=api.${BASE_DOMAIN}

# Remote Schemas (optional)
# REMOTE_SCHEMA_1_NAME=external_api
# REMOTE_SCHEMA_1_URL=https://api.external.com/graphql
# REMOTE_SCHEMA_1_HEADERS=x-api-key:your-api-key

#####################################
# Hasura Auth Service
#####################################
AUTH_VERSION=0.36.0
AUTH_HOST=auth
AUTH_PORT=4000
AUTH_CLIENT_URL=http://localhost:3000
AUTH_JWT_REFRESH_TOKEN_EXPIRES_IN=2592000
AUTH_JWT_ACCESS_TOKEN_EXPIRES_IN=900
AUTH_WEBAUTHN_ENABLED=false
AUTH_ROUTE=auth.${BASE_DOMAIN}

# Email Configuration (Development - MailPit)
AUTH_SMTP_HOST=mailpit
AUTH_SMTP_PORT=1025
AUTH_SMTP_USER=""
AUTH_SMTP_PASS=""
AUTH_SMTP_SECURE=false
AUTH_SMTP_SENDER=noreply@${BASE_DOMAIN}

#####################################
# File Storage (MinIO/S3)
#####################################
STORAGE_VERSION=0.6.1
STORAGE_ROUTE=storage.${BASE_DOMAIN}
STORAGE_CONSOLE_ROUTE=storage-console.${BASE_DOMAIN}
MINIO_VERSION=latest
MINIO_PORT=9000
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=minioadmin
S3_ACCESS_KEY=storage-access-key-dev
S3_SECRET_KEY=storage-secret-key-dev
S3_BUCKET=nhost
S3_REGION=us-east-1

#####################################
# Nginx Proxy Configuration
#####################################
NGINX_VERSION=alpine
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443

#####################################
# SSL/TLS Configuration
#####################################
# Modes: local, letsencrypt, custom, none
SSL_MODE=local
# LETSENCRYPT_EMAIL=admin@yourdomain.com
# LETSENCRYPT_STAGING=true
# SSL_CERT_PATH=/path/to/cert.pem
# SSL_KEY_PATH=/path/to/key.pem

#####################################
# Optional Services
#####################################

# Functions Service
FUNCTIONS_ENABLED=false
FUNCTIONS_ROUTE=functions.${BASE_DOMAIN}

# Dashboard
DASHBOARD_ENABLED=false
DASHBOARD_VERSION=latest
DASHBOARD_ROUTE=dashboard.${BASE_DOMAIN}

# Redis Cache
REDIS_ENABLED=false
REDIS_VERSION=7-alpine
REDIS_PORT=6379
REDIS_PASSWORD=""

# Email Testing (Development)
EMAIL_PROVIDER=mailpit
MAILPIT_SMTP_PORT=1025
MAILPIT_UI_PORT=8025
MAILPIT_ROUTE=mail.${BASE_DOMAIN}
EMAIL_FROM=noreply@${BASE_DOMAIN}

#####################################
# Microservices Configuration
#####################################
SERVICES_ENABLED=false

# NestJS Services
NESTJS_ENABLED=false
NESTJS_SERVICES=""
NESTJS_USE_TYPESCRIPT=true
NESTJS_PORT_START=3100

# BullMQ Workers
BULLMQ_ENABLED=false
BULLMQ_WORKERS=""
BULLMQ_DASHBOARD_ENABLED=false
BULLMQ_DASHBOARD_PORT=3200
BULLMQ_DASHBOARD_ROUTE=queues.${BASE_DOMAIN}

# GoLang Services
GOLANG_ENABLED=false
GOLANG_SERVICES=""
GOLANG_PORT_START=3300

# Python Services
PYTHON_ENABLED=false
PYTHON_SERVICES=""
PYTHON_FRAMEWORK=fastapi
PYTHON_PORT_START=3400

# NestJS Always-Running Service
NESTJS_RUN_ENABLED=false
NESTJS_RUN_PORT=3500

#####################################
# Advanced Configuration
#####################################

# Hasura Metadata
HASURA_METADATA_DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# Docker Network
DOCKER_NETWORK=${PROJECT_NAME}_network

# Internal Ports
HASURA_PORT=8080
HASURA_CONSOLE_PORT=9695
FUNCTIONS_PORT=3000
DASHBOARD_PORT=3000
CONFIG_SERVER_PORT=4001

# Service Endpoints
S3_ENDPOINT=http://minio:${MINIO_PORT}
FILES_ROUTE=files.${BASE_DOMAIN}
MAIL_ROUTE=mail.${BASE_DOMAIN}

#####################################
# Application Routes
#####################################

# Custom app routing (port:subdomain)
# APP_1_ROUTE=3000:app.${BASE_DOMAIN}
# APP_2_ROUTE=3001:admin.${BASE_DOMAIN}
# APP_3_ROUTE=5173:dev.${BASE_DOMAIN}



# Exhaustive List of PostgreSQL Extensions Supported by nself
#
#  Core Extensions (Built into PostgreSQL)
#
#  1. uuid-ossp - UUID generation functions
#  2. pgcrypto - Cryptographic functions
#  3. citext - Case-insensitive text type
#  4. hstore - Key-value store
#  5. pg_trgm - Trigram text search
#  6. btree_gin - GIN index support for common types
#  7. btree_gist - GiST index support for common types
#  8. postgres_fdw - Foreign data wrapper for PostgreSQL
#  9. file_fdw - Foreign data wrapper for files
#  10. pg_stat_statements - Query performance statistics
#  11. tablefunc - Cross tabulation functions
#  12. unaccent - Text search dictionary for unaccented matching
#  13. intarray - Functions for 1-D arrays of integers
#  14. ltree - Hierarchical tree-like structures
#  15. xml2 - XPath querying and XSLT
#  16. fuzzystrmatch - Fuzzy string matching
#  17. cube - Multi-dimensional cubes
#  18. earthdistance - Great circle distance calculations
#  19. isn - International product numbering standards
#  20. lo - Large object maintenance
#  21. pg_buffercache - Examine shared buffer cache
#  22. pg_prewarm - Prewarm buffer cache
#  23. pg_visibility - Visibility map examination
#  24. pgrowlocks - Row locking information
#  25. pgstattuple - Tuple-level statistics
#  26. sslinfo - SSL certificate information
#  27. tsm_system_rows - TABLESAMPLE method SYSTEM_ROWS
#  28. tsm_system_time - TABLESAMPLE method SYSTEM_TIME
#  29. adminpack - Administrative functions
#  30. amcheck - Verify index integrity
#  31. bloom - Bloom filter index
#  32. dblink - Connect to other PostgreSQL databases
#  33. dict_int - Dictionary for integers
#  34. dict_xsyn - Dictionary of synonyms
#  35. pageinspect - Inspect database pages
#  36. pg_freespacemap - Free space map
#  37. pg_surgery - Perform surgery on relation data
#  38. pg_walinspect - Inspect WAL
#
#  Contrib Extensions
#
#  39. pgaudit - Session and object audit logging
#
#  Third-party Extensions (Available in standard images)
#
#  40. timescaledb - Time-series database
#  41. postgis - Geographic information system
#  42. postgis_topology - PostGIS topology support
#  43. postgis_raster - PostGIS raster support
#  44. postgis_tiger_geocoder - PostGIS TIGER geocoder
#  45. address_standardizer - Address standardizer
#  46. address_standardizer_data_us - US address data
#  47. pgrouting - Routing functionality
#  48. pgvector - Vector similarity search
#  49. pg_cron - Job scheduler
#  50. pg_partman - Partition management
#  51. pg_repack - Online table reorganization
#  52. pglogical - Logical replication
#  53. wal2json - WAL to JSON output
#  54. pg_jsonschema - JSON Schema validation
#  55. pg_graphql - GraphQL support
#  56. pg_net - HTTP client
#
#  ❌ Not Available in Standard Image (Require custom PostgreSQL image)
#
#  57. plv8 - JavaScript language
#  58. plpython3u - Python 3 language
#  59. plperlu - Perl language (untrusted)
#  60. pltclu - Tcl language (untrusted)
#  61. plr - R language
#  62. pljava - Java language
#  63. plsh - Shell language
#  64. multicorn - Foreign data wrapper framework
#  65. citus - Distributed PostgreSQL
#  66. age - Graph database
#  67. orioledb - Table storage engine
#  68. pg_lakehouse - Data lakehouse
#
#  Pre-configured Extension Groups for common use cases:
#
#  # Spatial/Geographic
#  POSTGRES_EXTENSIONS=postgis,postgis_topology,postgis_raster,address_standardizer
#
#  # Full-text Search
#  POSTGRES_EXTENSIONS=pg_trgm,unaccent,fuzzystrmatch
#
#  # Performance Monitoring
#  POSTGRES_EXTENSIONS=pg_stat_statements,pg_buffercache,pgstattuple
#
#  # Security & Crypto
#  POSTGRES_EXTENSIONS=pgcrypto,uuid-ossp
#
#  # Time-series Analytics
#  POSTGRES_EXTENSIONS=timescaledb,pg_partman
#
#  # Machine Learning
#  POSTGRES_EXTENSIONS=pgvector,plpython3u
#
#  # Replication
#  POSTGRES_EXTENSIONS=pglogical,wal2json
#
#  How to Use in .env.local
#
#  # Basic web application
#  POSTGRES_EXTENSIONS=uuid-ossp,pgcrypto,citext
#
#  # E-commerce with search
#  POSTGRES_EXTENSIONS=uuid-ossp,pgcrypto,pg_trgm,unaccent,fuzzystrmatch
#
#  # Location-based service
#  POSTGRES_EXTENSIONS=uuid-ossp,postgis,postgis_topology,pgrouting
#
#  # Analytics platform
#  POSTGRES_EXTENSIONS=uuid-ossp,timescaledb,pg_stat_statements
#
#  # AI/ML application
#  POSTGRES_EXTENSIONS=uuid-ossp,pgvector,pgcrypto
#
#  # Everything but the kitchen sink (not recommended)
#  POSTGRES_EXTENSIONS=uuid-ossp,pgcrypto,citext,pg_trgm,timescaledb,postgis,pgvector
#
#  Special Handling Notes
#
#  Based on the build script, some extensions have special handling:
#  - uuid-ossp: Quoted because of the hyphen
#  - timescaledb: Uses CASCADE for dependencies
#  - postgis: Uses CASCADE for dependencies
#  - pgvector: Actually creates as "vector" extension (naming difference)
#
#  Default Extension
#
#  If no POSTGRES_EXTENSIONS is specified, nself defaults to:
#  POSTGRES_EXTENSIONS=uuid-ossp
